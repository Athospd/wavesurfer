{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/./src/plugin/timeline.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TimelinePlugin","params","ws","this","container","document","querySelector","Error","wavesurfer","util","extend","height","notchPercentHeight","labelPadding","unlabeledNotchColor","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","fontFamily","fontSize","duration","zoomDebounce","formatTimeCallback","defaultFormatTimeCallback","timeInterval","defaultTimeInterval","primaryLabelInterval","defaultPrimaryLabelInterval","secondaryLabelInterval","defaultSecondaryLabelInterval","offset","canvases","wrapper","drawer","pixelRatio","maxCanvasWidth","maxCanvasElementWidth","_onZoom","debounce","render","deferInit","instance","isReady","_onReady","once","unAll","un","_onRedraw","removeEventListener","_onScroll","parentNode","_onWrapperClick","removeChild","wsParams","innerHTML","appendChild","createElement","style","display","position","userSelect","webkitUserSelect","fillParent","scrollParent","width","overflowX","overflowY","addEventListener","createWrapper","updateCanvases","updateCanvasesPositioning","renderCanvases","canvas","push","zIndex","pop","parentElement","totalWidth","Math","round","scrollWidth","requiredCanvases","ceil","length","addCanvas","removeCanvas","canvasesLength","forEach","canvasWidth","left","timeline","backend","getDuration","totalSeconds","parseInt","getWidth","height1","height2","pixelsPerSecond","formatTime","intervalFnOrVal","option","curPixel","curSeconds","positioning","renderPositions","cb","pos","setFillStyles","setFonts","fillRect","fillText","fillStyle","getContext","font","x","y","leftOffset","intersection","x1","max","y1","x2","min","y2","text","textWidth","xOffset","context","measureText","seconds","pxPerSec","minutes","scrollLeft","on","e","preventDefault","relX","offsetX","layerX","fireEvent"],"mappings":"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","file":"wavesurfer.timeline.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"timeline\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"timeline\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"timeline\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"localhost:8080/dist/plugin/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/**\n * @typedef {Object} TimelinePluginParams\n * @desc Extends the `WavesurferParams` wavesurfer was initialised with\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the timeline should be drawn. This is the only required parameter.\n * @property {number} notchPercentHeight=90 Height of notches in percent\n * @property {string} unlabeledNotchColor='#c0c0c0' The colour of the notches\n * that do not have labels\n * @property {string} primaryColor='#000' The colour of the main notches\n * @property {string} secondaryColor='#c0c0c0' The colour of the secondary\n * notches\n * @property {string} primaryFontColor='#000' The colour of the labels next to\n * the main notches\n * @property {string} secondaryFontColor='#000' The colour of the labels next to\n * the secondary notches\n * @property {number} labelPadding=5 The padding between the label and the notch\n * @property {?number} zoomDebounce A debounce timeout to increase rendering\n * performance for large files\n * @property {string} fontFamily='Arial'\n * @property {number} fontSize=10 Font size of labels in pixels\n * @property {?number} duration Length of the track in seconds. Overrides\n * getDuration() for setting length of timeline\n * @property {function} formatTimeCallback (sec, pxPerSec) -> label\n * @property {function} timeInterval (pxPerSec) -> seconds between notches\n * @property {function} primaryLabelInterval (pxPerSec) -> cadence between\n * labels in primary color\n * @property {function} secondaryLabelInterval (pxPerSec) -> cadence between\n * labels in secondary color\n * @property {?number} offset Offset for the timeline start in seconds. May also be\n * negative.\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('timeline')`\n */\n\n/**\n * Adds a timeline to the waveform.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import TimelinePlugin from 'wavesurfer.timeline.js';\n *\n * // commonjs\n * var TimelinePlugin = require('wavesurfer.timeline.js');\n *\n * // if you are using <script> tags\n * var TimelinePlugin = window.WaveSurfer.timeline;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     TimelinePlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class TimelinePlugin {\n    /**\n     * Timeline plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {TimelinePluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'timeline',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            instance: TimelinePlugin\n        };\n    }\n\n    // event handlers\n    /** @private */\n    _onScroll = () => {\n        if (this.wrapper && this.drawer.wrapper) {\n            this.wrapper.scrollLeft = this.drawer.wrapper.scrollLeft;\n        }\n    };\n\n    /**\n     * @private\n     * @returns {void}\n     */\n    _onRedraw = () => this.render();\n\n    /** @private */\n    _onReady = () => {\n        const ws = this.wavesurfer;\n        this.drawer = ws.drawer;\n        this.pixelRatio = ws.drawer.params.pixelRatio;\n        this.maxCanvasWidth = ws.drawer.maxCanvasWidth || ws.drawer.width;\n        this.maxCanvasElementWidth =\n            ws.drawer.maxCanvasElementWidth ||\n            Math.round(this.maxCanvasWidth / this.pixelRatio);\n\n        // add listeners\n        ws.drawer.wrapper.addEventListener('scroll', this._onScroll);\n        ws.on('redraw', this._onRedraw);\n        ws.on('zoom', this._onZoom);\n\n        this.render();\n    };\n\n    /**\n     * @private\n     * @param {object} e Click event\n     */\n    _onWrapperClick = e => {\n        e.preventDefault();\n        const relX = 'offsetX' in e ? e.offsetX : e.layerX;\n        this.fireEvent('click', relX / this.wrapper.scrollWidth || 0);\n    };\n\n    /**\n     * Creates an instance of TimelinePlugin.\n     *\n     * You probably want to use TimelinePlugin.create()\n     *\n     * @param {TimelinePluginParams} params Plugin parameters\n     * @param {object} ws Wavesurfer instance\n     */\n    constructor(params, ws) {\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(params.container)\n                : params.container;\n\n        if (!this.container) {\n            throw new Error('No container for wavesurfer timeline');\n        }\n        /** @private */\n        this.wavesurfer = ws;\n        /** @private */\n        this.util = ws.util;\n        /** @private */\n        this.params = this.util.extend(\n            {},\n            {\n                height: 20,\n                notchPercentHeight: 90,\n                labelPadding: 5,\n                unlabeledNotchColor: '#c0c0c0',\n                primaryColor: '#000',\n                secondaryColor: '#c0c0c0',\n                primaryFontColor: '#000',\n                secondaryFontColor: '#000',\n                fontFamily: 'Arial',\n                fontSize: 10,\n                duration: null,\n                zoomDebounce: false,\n                formatTimeCallback: this.defaultFormatTimeCallback,\n                timeInterval: this.defaultTimeInterval,\n                primaryLabelInterval: this.defaultPrimaryLabelInterval,\n                secondaryLabelInterval: this.defaultSecondaryLabelInterval,\n                offset: 0\n            },\n            params\n        );\n\n        /** @private */\n        this.canvases = [];\n        /** @private */\n        this.wrapper = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.pixelRatio = null;\n        /** @private */\n        this.maxCanvasWidth = null;\n        /** @private */\n        this.maxCanvasElementWidth = null;\n        /**\n         * This event handler has to be in the constructor function because it\n         * relies on the debounce function which is only available after\n         * instantiation\n         *\n         * Use a debounced function if `params.zoomDebounce` is defined\n         *\n         * @private\n         * @returns {void}\n         */\n        this._onZoom = this.params.zoomDebounce\n            ? this.wavesurfer.util.debounce(\n                  () => this.render(),\n                  this.params.zoomDebounce\n              )\n            : () => this.render();\n    }\n\n    /**\n     * Initialisation function used by the plugin API\n     */\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n        }\n    }\n\n    /**\n     * Destroy function used by the plugin API\n     */\n    destroy() {\n        this.unAll();\n        this.wavesurfer.un('redraw', this._onRedraw);\n        this.wavesurfer.un('zoom', this._onZoom);\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.drawer.wrapper.removeEventListener(\n            'scroll',\n            this._onScroll\n        );\n        if (this.wrapper && this.wrapper.parentNode) {\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\n            this.wrapper.parentNode.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    }\n\n    /**\n     * Create a timeline element to wrap the canvases drawn by this plugin\n     *\n     * @private\n     */\n    createWrapper() {\n        const wsParams = this.wavesurfer.params;\n        this.container.innerHTML = '';\n        this.wrapper = this.container.appendChild(\n            document.createElement('timeline')\n        );\n        this.util.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: `${this.params.height}px`\n        });\n\n        if (wsParams.fillParent || wsParams.scrollParent) {\n            this.util.style(this.wrapper, {\n                width: '100%',\n                overflowX: 'hidden',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.wrapper.addEventListener('click', this._onWrapperClick);\n    }\n\n    /**\n     * Render the timeline (also updates the already rendered timeline)\n     *\n     * @private\n     */\n    render() {\n        if (!this.wrapper) {\n            this.createWrapper();\n        }\n        this.updateCanvases();\n        this.updateCanvasesPositioning();\n        this.renderCanvases();\n    }\n\n    /**\n     * Add new timeline canvas\n     *\n     * @private\n     */\n    addCanvas() {\n        const canvas = this.wrapper.appendChild(\n            document.createElement('canvas')\n        );\n        this.canvases.push(canvas);\n        this.util.style(canvas, {\n            position: 'absolute',\n            zIndex: 4\n        });\n    }\n\n    /**\n     * Remove timeline canvas\n     *\n     * @private\n     */\n    removeCanvas() {\n        const canvas = this.canvases.pop();\n        canvas.parentElement.removeChild(canvas);\n    }\n\n    /**\n     * Make sure the correct of timeline canvas elements exist and are cached in\n     * this.canvases\n     *\n     * @private\n     */\n    updateCanvases() {\n        const totalWidth = Math.round(this.drawer.wrapper.scrollWidth);\n        const requiredCanvases = Math.ceil(\n            totalWidth / this.maxCanvasElementWidth\n        );\n\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n    }\n\n    /**\n     * Update the dimensions and positioning style for all the timeline canvases\n     *\n     * @private\n     */\n    updateCanvasesPositioning() {\n        // cache length for performance\n        const canvasesLength = this.canvases.length;\n        this.canvases.forEach((canvas, i) => {\n            // canvas width is the max element width, or if it is the last the\n            // required width\n            const canvasWidth =\n                i === canvasesLength - 1\n                    ? this.drawer.wrapper.scrollWidth -\n                      this.maxCanvasElementWidth * (canvasesLength - 1)\n                    : this.maxCanvasElementWidth;\n            // set dimensions and style\n            canvas.width = canvasWidth * this.pixelRatio;\n            // on certain pixel ratios the canvas appears cut off at the bottom,\n            // therefore leave 1px extra\n            canvas.height = (this.params.height + 1) * this.pixelRatio;\n            this.util.style(canvas, {\n                width: `${canvasWidth}px`,\n                height: `${this.params.height}px`,\n                left: `${i * this.maxCanvasElementWidth}px`\n            });\n        });\n    }\n\n    /**\n     * Render the timeline labels and notches\n     *\n     * @private\n     */\n    renderCanvases() {\n        const duration =\n            this.wavesurfer.timeline.params.duration ||\n            this.wavesurfer.backend.getDuration();\n\n        if (duration <= 0) {\n            return;\n        }\n        const wsParams = this.wavesurfer.params;\n        const fontSize = this.params.fontSize * wsParams.pixelRatio;\n        const totalSeconds = parseInt(duration, 10) + 1;\n        const width =\n            wsParams.fillParent && !wsParams.scrollParent\n                ? this.drawer.getWidth()\n                : this.drawer.wrapper.scrollWidth * wsParams.pixelRatio;\n        const height1 = this.params.height * this.pixelRatio;\n        const height2 =\n            this.params.height *\n            (this.params.notchPercentHeight / 100) *\n            this.pixelRatio;\n        const pixelsPerSecond = width / duration;\n\n        const formatTime = this.params.formatTimeCallback;\n        // if parameter is function, call the function with\n        // pixelsPerSecond, otherwise simply take the value as-is\n        const intervalFnOrVal = option =>\n            typeof option === 'function' ? option(pixelsPerSecond) : option;\n        const timeInterval = intervalFnOrVal(this.params.timeInterval);\n        const primaryLabelInterval = intervalFnOrVal(\n            this.params.primaryLabelInterval\n        );\n        const secondaryLabelInterval = intervalFnOrVal(\n            this.params.secondaryLabelInterval\n        );\n\n        let curPixel = pixelsPerSecond * this.params.offset;\n        let curSeconds = 0;\n        let i;\n        // build an array of position data with index, second and pixel data,\n        // this is then used multiple times below\n        const positioning = [];\n        for (i = 0; i < totalSeconds / timeInterval; i++) {\n            positioning.push([i, curSeconds, curPixel]);\n            curSeconds += timeInterval;\n            curPixel += pixelsPerSecond * timeInterval;\n        }\n\n        // iterate over each position\n        const renderPositions = cb => {\n            positioning.forEach(pos => {\n                cb(pos[0], pos[1], pos[2]);\n            });\n        };\n\n        // render primary labels\n        this.setFillStyles(this.params.primaryColor);\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\n        this.setFillStyles(this.params.primaryFontColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (i % primaryLabelInterval === 0) {\n                this.fillRect(curPixel, 0, 1, height1);\n                this.fillText(\n                    formatTime(curSeconds, pixelsPerSecond),\n                    curPixel + this.params.labelPadding * this.pixelRatio,\n                    height1\n                );\n            }\n        });\n\n        // render secondary labels\n        this.setFillStyles(this.params.secondaryColor);\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\n        this.setFillStyles(this.params.secondaryFontColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (i % secondaryLabelInterval === 0) {\n                this.fillRect(curPixel, 0, 1, height1);\n                this.fillText(\n                    formatTime(curSeconds, pixelsPerSecond),\n                    curPixel + this.params.labelPadding * this.pixelRatio,\n                    height1\n                );\n            }\n        });\n\n        // render the actual notches (when no labels are used)\n        this.setFillStyles(this.params.unlabeledNotchColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (\n                i % secondaryLabelInterval !== 0 &&\n                i % primaryLabelInterval !== 0\n            ) {\n                this.fillRect(curPixel, 0, 1, height2);\n            }\n        });\n    }\n\n    /**\n     * Set the canvas fill style\n     *\n     * @param {DOMString|CanvasGradient|CanvasPattern} fillStyle Fill style to\n     * use\n     * @private\n     */\n    setFillStyles(fillStyle) {\n        this.canvases.forEach(canvas => {\n            canvas.getContext('2d').fillStyle = fillStyle;\n        });\n    }\n\n    /**\n     * Set the canvas font\n     *\n     * @param {DOMString} font Font to use\n     * @private\n     */\n    setFonts(font) {\n        this.canvases.forEach(canvas => {\n            canvas.getContext('2d').font = font;\n        });\n    }\n\n    /**\n     * Draw a rectangle on the canvases\n     *\n     * (it figures out the offset for each canvas)\n     *\n     * @param {number} x X-position\n     * @param {number} y Y-position\n     * @param {number} width Width\n     * @param {number} height Height\n     * @private\n     */\n    fillRect(x, y, width, height) {\n        this.canvases.forEach((canvas, i) => {\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(x + width, i * this.maxCanvasWidth + canvas.width),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                canvas\n                    .getContext('2d')\n                    .fillRect(\n                        intersection.x1 - leftOffset,\n                        intersection.y1,\n                        intersection.x2 - intersection.x1,\n                        intersection.y2 - intersection.y1\n                    );\n            }\n        });\n    }\n\n    /**\n     * Fill a given text on the canvases\n     *\n     * @param {string} text Text to render\n     * @param {number} x X-position\n     * @param {number} y Y-position\n     * @private\n     */\n    fillText(text, x, y) {\n        let textWidth;\n        let xOffset = 0;\n\n        this.canvases.forEach(canvas => {\n            const context = canvas.getContext('2d');\n            const canvasWidth = context.canvas.width;\n\n            if (xOffset > x + textWidth) {\n                return;\n            }\n\n            if (xOffset + canvasWidth > x) {\n                textWidth = context.measureText(text).width;\n                context.fillText(text, x - xOffset, y);\n            }\n\n            xOffset += canvasWidth;\n        });\n    }\n\n    /**\n     * Turn the time into a suitable label for the time.\n     *\n     * @param {number} seconds Seconds to format\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Time\n     */\n    defaultFormatTimeCallback(seconds, pxPerSec) {\n        if (seconds / 60 > 1) {\n            // calculate minutes and seconds from seconds count\n            const minutes = parseInt(seconds / 60, 10);\n            seconds = parseInt(seconds % 60, 10);\n            // fill up seconds with zeroes\n            seconds = seconds < 10 ? '0' + seconds : seconds;\n            return `${minutes}:${seconds}`;\n        }\n        return Math.round(seconds * 1000) / 1000;\n    }\n\n    /**\n     * Return how many seconds should be between each notch\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Time\n     */\n    defaultTimeInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 1;\n        } else if (pxPerSec * 5 >= 25) {\n            return 5;\n        } else if (pxPerSec * 15 >= 25) {\n            return 15;\n        }\n        return Math.ceil(0.5 / pxPerSec) * 60;\n    }\n\n    /**\n     * Return the cadence of notches that get labels in the primary color.\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Cadence\n     */\n    defaultPrimaryLabelInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 10;\n        } else if (pxPerSec * 5 >= 25) {\n            return 6;\n        } else if (pxPerSec * 15 >= 25) {\n            return 4;\n        }\n        return 4;\n    }\n\n    /**\n     * Return the cadence of notches that get labels in the secondary color.\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Cadence\n     */\n    defaultSecondaryLabelInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 5;\n        } else if (pxPerSec * 5 >= 25) {\n            return 2;\n        } else if (pxPerSec * 15 >= 25) {\n            return 2;\n        }\n        return 2;\n    }\n}\n"],"sourceRoot":""}