{"version":3,"sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/./src/util/index.js","webpack://WaveSurfer/./src/util/observer.js","webpack://WaveSurfer/./src/util/get-id.js","webpack://WaveSurfer/./src/util/style.js","webpack://WaveSurfer/./src/util/request-animation-frame.js","webpack://WaveSurfer/./src/webaudio.js","webpack://WaveSurfer/./src/wavesurfer.js","webpack://WaveSurfer/./src/util/ajax.js","webpack://WaveSurfer/./src/util/max.js","webpack://WaveSurfer/./src/util/min.js","webpack://WaveSurfer/./src/util/extend.js","webpack://WaveSurfer/./src/util/frame.js","webpack://WaveSurfer/./node_modules/debounce/index.js","webpack://WaveSurfer/./src/util/prevent-click.js","webpack://WaveSurfer/./src/util/fetch.js","webpack://WaveSurfer/./src/drawer.multicanvas.js","webpack://WaveSurfer/./src/drawer.js","webpack://WaveSurfer/./src/drawer.canvasentry.js","webpack://WaveSurfer/./src/mediaelement.js","webpack://WaveSurfer/./src/peakcache.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Observer","this","handlers","event","fn","push","callback","un","e","length","splice","handler","on","args","apply","setTimeout","forEach","prefix","undefined","Math","random","toString","substring","el","styles","keys","prop","style","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","element","PLAYING","PAUSED","FINISHED","WebAudio","params","audioContext","offlineAudioContext","stateBehaviors","init","addOnAudioProcess","getPlayedPercents","duration","getDuration","getCurrentTime","startPosition","getPlayedTime","removeOnAudioProcess","fireEvent","ac","supportsWebAudio","getAudioContext","lastPlay","currentTime","scheduledPause","states","analyser","buffer","filters","gainNode","mergedPeaks","offlineAc","peaks","playbackRate","scriptNode","source","splitPeaks","state","explicitDuration","util","AudioContext","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","createVolumeNode","createScriptNode","createAnalyserNode","setState","setPlaybackRate","audioRate","setLength","filter","disconnect","connect","setFilters","disconnectFilters","reduce","prev","curr","audioScriptProcessor","createScriptProcessor","scriptBufferSize","createJavaScriptNode","destination","onaudioprocess","time","pause","createAnalyser","createGain","createGainNode","deviceId","audio","Audio","setSinkId","Promise","reject","Error","autoplay","dest","createMediaStreamDestination","srcObject","stream","gain","setValueAtTime","arraybuffer","errback","getOfflineAudioContext","decodeAudioData","data","channels","numberOfChannels","first","last","splitChannels","newBuffer","createBuffer","sampleSize","sampleStep","chan","getChannelData","start","end","min","max","j","isPaused","unAll","disconnectSource","closeAudioContext","close","createSource","createBufferSource","noteGrainOn","stop","noteOff","adjustedTime","seekTo","resume","play","WaveSurfer","defaultParams","autoCenter","backend","backgroundColor","barHeight","barGap","container","cursorColor","cursorWidth","dragSelection","fillParent","forceDecode","height","hideScrollbar","interact","loopSelection","maxCanvasWidth","mediaContainer","mediaControls","mediaType","minPxPerSec","normalize","partialRender","pixelRatio","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","progressColor","removeMediaElementOnDestroy","renderer","MultiCanvas","responsive","rtl","scrollParent","skipLength","waveColor","xhr","backends","MediaElement","extend","document","querySelector","transform","setBackgroundColor","savedVolume","isMuted","tmpEvents","currentRequest","drawer","peakCache","Drawer","Backend","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","wrapper","clientWidth","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","instance","staticProps","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","destroy","addEventListener","drawBuffer","progress","newVolume","getVolume","PeakCache","seconds","skip","offset","position","seekAndCenter","recenter","isFinite","paused","oldScrollParent","setVolume","rate","getPlaybackRate","setMute","mute","color","background","updateCursor","setHeight","nominalWidth","round","parentWidth","getWidth","width","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","decodeArrayBuffer","loadDecodedBuffer","load","blob","reader","FileReader","onProgress","loadArrayBuffer","target","result","readAsArrayBuffer","empty","url","preload","preloadIgnoreReasons","indexOf","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","action","once","getArrayBuffer","setPeaks","urlOrElt","elt","loadElt","src","err","options","responseType","request","fetchFile","message","percentComplete","lengthComputable","loaded","total","accuracy","noWindow","arr","map","val","json","JSON","stringify","open","encodeURIComponent","format","quality","type","getImage","controller","abort","cancelAjax","clearTmpEvents","setWidth","destroyAllPlugins","removeEventListener","VERSION","__VERSION__","XMLHttpRequest","fired100","method","requestHeaders","header","setRequestHeader","withCredentials","status","response","send","values","largest","Infinity","smallest","Number","sources","func","wait","immediate","timeout","context","timestamp","later","Date","now","debounced","arguments","callNow","clear","clearTimeout","flush","preventClickHandler","stopPropagation","body","fetchHeaders","Headers","fetchRequest","Request","AbortController","append","fetchOptions","headers","credentials","cache","redirect","referrer","signal","fetch","then","progressAvailable","contentLength","Response","ReadableStream","ProgressHandler","errMsg","ok","arrayBuffer","text","catch","error","_reader","getReader","parseInt","read","done","byteLength","enqueue","maxCanvasElementWidth","hasProgressCanvas","halfPixel","canvases","progressWave","EntryClass","CanvasEntry","overlap","ceil","createWrapper","createElements","appendChild","createElement","zIndex","left","top","bottom","overflow","display","boxSizing","borderRightStyle","pointerEvents","addCanvas","borderRightWidth","borderRightColor","totalWidth","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","entry","updateDimensions","clearWave","leftOffset","initWave","initProgress","lastEntry","wave","parentElement","removeChild","pop","elementWidth","channelIndex","prepareDraw","absmax","hasMinVals","offsetY","halfH","peakIndexScale","bar","barWidth","step","scale","peak","floor","h","fillRect","reflectedPeaks","len","drawLine","setFillStyles","drawLines","x","y","startCanvas","endCanvas","intersection","x1","y1","x2","y2","fillRects","frame","Array","channelPeaks","some","all","images","lastPos","userSelect","webkitUserSelect","overflowX","overflowY","setupWrapperEvents","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","right","scrollLeft","scrollWidth","scrollbarHeight","offsetHeight","clientHeight","clientY","handleEvent","drawBars","drawWave","percent","recenterOnPosition","half","maxScroll","updateSize","minPxDelta","pos","newPos","updateProgress","parentNode","waveCtx","progressCtx","id","constructor","toLowerCase","getContext","offsetLeft","elementSize","clearRect","canvas","fillStyle","fillRectToContext","ctx","drawLineToContext","canvasStart","canvasEnd","halfOffset","absmaxHalf","beginPath","moveTo","lineTo","closePath","fill","resolve","toBlob","toDataURL","media","volume","elementPosition","onPlayEnd","createTimer","onAudioProcess","controls","prevMedia","_load","muted","seekable","clearPlayEnd","promise","setPlayEnd","_onPlayEnd","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","concat","sort","a","b","uncachedRangePairs","peakCacheRangePairs"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,aAAc,GAAIH,GACC,iBAAZC,QACdA,QAAoB,WAAID,IAExBD,EAAiB,WAAIC,IARvB,CASGK,OAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,qkCClFrD,cACA,UACA,UACA,UACA,UACA,WACA,UACA,UACA,WACA,WACA,WACA,W,8TCDqBC,E,WAIjB,c,4FAAc,SAMVC,KAAKC,SAAW,K,kDASjBC,EAAOC,GAAI,WACLH,KAAKC,WACND,KAAKC,SAAW,IAGpB,IAAIA,EAAWD,KAAKC,SAASC,GAO7B,OANKD,IACDA,EAAWD,KAAKC,SAASC,GAAS,IAEtCD,EAASG,KAAKD,GAGP,CACH7B,KAAM4B,EACNG,SAAUF,EACVG,GAAI,SAACC,EAAGJ,GAAJ,OAAW,EAAKG,GAAGC,EAAGJ,O,yBAW/BD,EAAOC,GACN,GAAKH,KAAKC,SAAV,CAIA,IACIlC,EADEkC,EAAWD,KAAKC,SAASC,GAE/B,GAAID,EACA,GAAIE,EACA,IAAKpC,EAAIkC,EAASO,OAAS,EAAGzC,GAAK,EAAGA,IAC9BkC,EAASlC,IAAMoC,GACfF,EAASQ,OAAO1C,EAAG,QAI3BkC,EAASO,OAAS,K,8BAS1BR,KAAKC,SAAW,O,2BAWfC,EAAOQ,GAAS,WASjB,OAAOV,KAAKW,GAAGT,EARJ,SAALC,IAAkB,2BAATS,EAAS,yBAATA,EAAS,gBAEpBF,EAAQG,MAAM,EAAMD,GAEpBE,WAAW,WACP,EAAKR,GAAGJ,EAAOC,IAChB,O,gCAWDD,GAAgB,2BAANU,EAAM,iCAANA,EAAM,kBACtB,GAAKZ,KAAKC,SAAV,CAGA,IAAMA,EAAWD,KAAKC,SAASC,GAC/BD,GACIA,EAASc,QAAQ,SAAAZ,GACbA,EAAE,WAAF,EAAMS,W,yJCxGP,SAAeI,QACXC,IAAXD,IACAA,EAAS,eAEb,OACIA,EACAE,KAAKC,SACAC,SAAS,IACTC,UAAU,I,6GCXR,SAAeC,EAAIC,GAM9B,OALA9C,OAAO+C,KAAKD,GAAQR,QAAQ,SAAAU,GACpBH,EAAGI,MAAMD,KAAUF,EAAOE,KAC1BH,EAAGI,MAAMD,GAAQF,EAAOE,MAGzBH,G,2HCNP3D,OAAOgE,uBACPhE,OAAOiE,6BACPjE,OAAOkE,0BACPlE,OAAOmE,wBACPnE,OAAOoE,yBACN,SAAC1B,EAAU2B,GAAX,OAAuBlB,WAAWT,EAAU,IAAO,MACtDd,KAAK5B,Q,gICdP,M,uSAAA,O,w9BAGA,IAAMsE,EAAU,UACVC,EAAS,SACTC,EAAW,WAOIC,E,YAyFjB,WAAYC,GAAQ,iB,4FAAA,UAChB,2BAtFJC,aAAe,KAqFK,EAnFpBC,oBAAsB,KAmFF,EAjFpBC,gBAiFoB,OAhFfP,EAAU,CACPQ,KADO,WAEHzC,KAAK0C,qBAETC,kBAJO,WAKH,IAAMC,EAAW5C,KAAK6C,cACtB,OAAO7C,KAAK8C,iBAAmBF,GAAY,GAE/CE,eARO,WASH,OAAO9C,KAAK+C,cAAgB/C,KAAKgD,mBAuEzB,IApEfd,EAAS,CACNO,KADM,WAEFzC,KAAKiD,wBAETN,kBAJM,WAKF,IAAMC,EAAW5C,KAAK6C,cACtB,OAAO7C,KAAK8C,iBAAmBF,GAAY,GAE/CE,eARM,WASF,OAAO9C,KAAK+C,iBA2DJ,IAxDfZ,EAAW,CACRM,KADQ,WAEJzC,KAAKiD,uBACLjD,KAAKkD,UAAU,WAEnBP,kBALQ,WAMJ,OAAO,GAEXG,eARQ,WASJ,OAAO9C,KAAK6C,iBA+CJ,GAGhB,EAAKR,OAASA,EAEd,EAAKc,GACDd,EAAOC,eACN,EAAKc,mBAAqB,EAAKC,kBAAoB,IAExD,EAAKC,SAAW,EAAKH,GAAGI,YAExB,EAAKR,cAAgB,EAErB,EAAKS,eAAiB,KAEtB,EAAKC,QAAL,OACKxB,EAAUxD,OAAOY,OAAO,EAAKmD,eAAeP,KADjD,IAEKC,EAASzD,OAAOY,OAAO,EAAKmD,eAAeN,KAFhD,IAGKC,EAAW1D,OAAOY,OAAO,EAAKmD,eAAeL,KAHlD,GAMA,EAAKuB,SAAW,KAEhB,EAAKC,OAAS,KAEd,EAAKC,QAAU,GAEf,EAAKC,SAAW,KAEhB,EAAKC,YAAc,KAEnB,EAAKC,UAAY,KAEjB,EAAKC,MAAQ,KAEb,EAAKC,aAAe,EAEpB,EAAKP,SAAW,KAEhB,EAAKQ,WAAa,KAElB,EAAKC,OAAS,KAEd,EAAKC,WAAa,GAElB,EAAKC,MAAQ,KAEb,EAAKC,iBAAmBjC,EAAOO,SA/Cf,E,4OAzFc2B,EAAKxE,U,8CAqDnC,SAAUpC,OAAO6G,eAAgB7G,OAAO8G,sB,wCAaxC,OAJK9G,OAAO+G,yBACR/G,OAAO+G,uBAAyB,IAAK/G,OAAO6G,cACxC7G,OAAO8G,qBAER9G,OAAO+G,yB,6CAUKC,GAKnB,OAJKhH,OAAOiH,gCACRjH,OAAOiH,8BAAgC,IAAKjH,OAAOkH,qBAC/ClH,OAAOmH,2BAA2B,EAAG,EAAGH,IAEzChH,OAAOiH,kC,kCA8Dd5E,KAAK+E,mBACL/E,KAAKgF,mBACLhF,KAAKiF,qBAELjF,KAAKkF,SAAShD,GACdlC,KAAKmF,gBAAgBnF,KAAKqC,OAAO+C,WACjCpF,KAAKqF,UAAU,K,0CAKXrF,KAAK4D,UACL5D,KAAK4D,QAAQ7C,QAAQ,SAAAuE,GACjBA,GAAUA,EAAOC,eAErBvF,KAAK4D,QAAU,KAEf5D,KAAK0D,SAAS8B,QAAQxF,KAAK6D,a,+BAS1BQ,GACDrE,KAAKqE,QAAUrE,KAAKyD,OAAOY,KAC3BrE,KAAKqE,MAAQrE,KAAKyD,OAAOY,GACzBrE,KAAKqE,MAAM5B,KAAKvE,KAAK8B,S,kCASP,2BAAT4D,EAAS,yBAATA,EAAS,gBAClB5D,KAAKyF,WAAW7B,K,iCAWTA,GAEP5D,KAAK0F,oBAGD9B,GAAWA,EAAQpD,SACnBR,KAAK4D,QAAUA,EAGf5D,KAAK0D,SAAS6B,aAGd3B,EACK+B,OAAO,SAACC,EAAMC,GAEX,OADAD,EAAKJ,QAAQK,GACNA,GACR7F,KAAK0D,UACP8B,QAAQxF,KAAK6D,a,yCAMlB7D,KAAKqC,OAAOyD,qBACZ9F,KAAKkE,WAAalE,KAAKqC,OAAOyD,qBAE1B9F,KAAKmD,GAAG4C,sBACR/F,KAAKkE,WAAalE,KAAKmD,GAAG4C,sBACtB3D,EAAS4D,kBAGbhG,KAAKkE,WAAalE,KAAKmD,GAAG8C,qBACtB7D,EAAS4D,kBAIrBhG,KAAKkE,WAAWsB,QAAQxF,KAAKmD,GAAG+C,e,0CAIhB,WAChBlG,KAAKkE,WAAWiC,eAAiB,WAC7B,IAAMC,EAAO,EAAKtD,iBAEdsD,GAAQ,EAAKvD,eACb,EAAKqC,SAAS/C,GACd,EAAKe,UAAU,UACRkD,GAAQ,EAAK5C,eACpB,EAAK6C,QACE,EAAKhC,QAAU,EAAKZ,OAAOxB,IAClC,EAAKiB,UAAU,eAAgBkD,M,6CAOvCpG,KAAKkE,WAAWiC,eAAiB,e,2CAKjCnG,KAAK0D,SAAW1D,KAAKmD,GAAGmD,iBACxBtG,KAAK0D,SAAS8B,QAAQxF,KAAK6D,Y,yCAUvB7D,KAAKmD,GAAGoD,WACRvG,KAAK6D,SAAW7D,KAAKmD,GAAGoD,aAExBvG,KAAK6D,SAAW7D,KAAKmD,GAAGqD,iBAG5BxG,KAAK6D,SAAS2B,QAAQxF,KAAKmD,GAAG+C,e,gCAUxBO,GACN,GAAIA,EAAU,CAMV,IAAIC,EAAQ,IAAI/I,OAAOgJ,MACvB,IAAKD,EAAME,UACP,OAAOC,QAAQC,OACX,IAAIC,MAAM,+CAGlBL,EAAMM,UAAW,EACjB,IAAIC,EAAOjH,KAAKmD,GAAG+D,+BAKnB,OAJAlH,KAAK6D,SAAS0B,aACdvF,KAAK6D,SAAS2B,QAAQyB,GACtBP,EAAMS,UAAYF,EAAKG,OAEhBV,EAAME,UAAUH,GAEvB,OAAOI,QAAQC,OAAO,IAAIC,MAAM,qBAAuBN,M,gCASrDzH,GACNgB,KAAK6D,SAASwD,KAAKC,eAAetI,EAAOgB,KAAKmD,GAAGI,e,kCASjD,OAAOvD,KAAK6D,SAASwD,KAAKrI,Q,wCAWZuI,EAAalH,EAAUmH,GAChCxH,KAAK+D,YACN/D,KAAK+D,UAAY/D,KAAKyH,uBAClBzH,KAAKmD,IAAMnD,KAAKmD,GAAGwB,WAAa3E,KAAKmD,GAAGwB,WAAa,QAG7D3E,KAAK+D,UAAU2D,gBACXH,EACA,SAAAI,GAAI,OAAItH,EAASsH,IACjBH,K,+BAUCxD,EAAOpB,GACI,MAAZA,IACA5C,KAAKsE,iBAAmB1B,GAE5B5C,KAAKgE,MAAQA,I,gCAQPxD,GAEN,IAAIR,KAAK8D,aAAetD,GAAU,EAAIR,KAAK8D,YAAYtD,OAAS,EAAI,EAApE,CAIAR,KAAKoE,WAAa,GAClBpE,KAAK8D,YAAc,GAGnB,IACI1F,EADEwJ,EAAW5H,KAAK2D,OAAS3D,KAAK2D,OAAOkE,iBAAmB,EAE9D,IAAKzJ,EAAI,EAAGA,EAAIwJ,EAAUxJ,IACtB4B,KAAKoE,WAAWhG,GAAK,GACrB4B,KAAKoE,WAAWhG,GAAG,GAAKoC,EAAS,IAAM,EACvCR,KAAKoE,WAAWhG,GAAG,GAAKoC,EAAS,GAAK,GAAK,EAE/CR,KAAK8D,YAAY,GAAKtD,EAAS,IAAM,EACrCR,KAAK8D,YAAY,GAAKtD,EAAS,GAAK,GAAK,K,+BAYpCA,EAAQsH,EAAOC,GACpB,GAAI/H,KAAKgE,MACL,OAAOhE,KAAKgE,MAEhB,IAAKhE,KAAK2D,OACN,MAAO,GAQX,GALAmE,EAAQA,GAAS,EACjBC,EAAOA,GAAQvH,EAAS,EAExBR,KAAKqF,UAAU7E,IAEVR,KAAK2D,OACN,OAAO3D,KAAKqC,OAAO2F,cACbhI,KAAKoE,WACLpE,KAAK8D,YAUf,IAAK9D,KAAK2D,OAAOnD,OAAQ,CACrB,IAAMyH,EAAYjI,KAAKkI,aAAa,EAAG,KAAMlI,KAAK2E,YAClD3E,KAAK2D,OAASsE,EAAUtE,OAG5B,IAGIvF,EAHE+J,EAAanI,KAAK2D,OAAOnD,OAASA,EAClC4H,KAAgBD,EAAa,KAAO,EACpCP,EAAW5H,KAAK2D,OAAOkE,iBAG7B,IAAKzJ,EAAI,EAAGA,EAAIwJ,EAAUxJ,IAAK,CAC3B,IAAM4F,EAAQhE,KAAKoE,WAAWhG,GACxBiK,EAAOrI,KAAK2D,OAAO2E,eAAelK,GACpCL,OAAC,EAEL,IAAKA,EAAI+J,EAAO/J,GAAKgK,EAAMhK,IAAK,CAC5B,IAAMwK,KAAWxK,EAAIoK,GACfK,KAASD,EAAQJ,GACnBM,EAAM,EACNC,EAAM,EACNC,OAAC,EAEL,IAAKA,EAAIJ,EAAOI,EAAIH,EAAKG,GAAKP,EAAY,CACtC,IAAMpJ,EAAQqJ,EAAKM,GAEf3J,EAAQ0J,IACRA,EAAM1J,GAGNA,EAAQyJ,IACRA,EAAMzJ,GAIdgF,EAAM,EAAIjG,GAAK2K,EACf1E,EAAM,EAAIjG,EAAI,GAAK0K,GAEV,GAALrK,GAAUsK,EAAM1I,KAAK8D,YAAY,EAAI/F,MACrCiC,KAAK8D,YAAY,EAAI/F,GAAK2K,IAGrB,GAALtK,GAAUqK,EAAMzI,KAAK8D,YAAY,EAAI/F,EAAI,MACzCiC,KAAK8D,YAAY,EAAI/F,EAAI,GAAK0K,IAK1C,OAAOzI,KAAKqC,OAAO2F,cAAgBhI,KAAKoE,WAAapE,KAAK8D,c,0CAS1D,OAAO9D,KAAKqE,MAAM1B,kBAAkBzE,KAAK8B,Q,yCAKrCA,KAAKmE,QACLnE,KAAKmE,OAAOoB,e,gCAQXvF,KAAK4I,YACN5I,KAAKqG,QAETrG,KAAK6I,QACL7I,KAAK2D,OAAS,KACd3D,KAAK0F,oBACL1F,KAAK8I,mBACL9I,KAAK6D,SAAS0B,aACdvF,KAAKkE,WAAWqB,aAChBvF,KAAK0D,SAAS6B,aAGVvF,KAAKqC,OAAO0G,oBAGiB,mBAAlB/I,KAAKmD,GAAG6F,OACE,UAAjBhJ,KAAKmD,GAAGkB,OAERrE,KAAKmD,GAAG6F,QAGZhJ,KAAKmD,GAAK,KAGLnD,KAAKqC,OAAOC,aAGbtC,KAAKqC,OAAOC,aAAe,KAF3B3E,OAAO+G,uBAAyB,KAKpC/G,OAAOiH,8BAAgC,Q,2BAS1CjB,GACD3D,KAAK+C,cAAgB,EACrB/C,KAAKsD,SAAWtD,KAAKmD,GAAGI,YACxBvD,KAAK2D,OAASA,EACd3D,KAAKiJ,iB,qCAKLjJ,KAAK8I,mBACL9I,KAAKmE,OAASnE,KAAKmD,GAAG+F,qBAGtBlJ,KAAKmE,OAAOoE,MAAQvI,KAAKmE,OAAOoE,OAASvI,KAAKmE,OAAOgF,YACrDnJ,KAAKmE,OAAOiF,KAAOpJ,KAAKmE,OAAOiF,MAAQpJ,KAAKmE,OAAOkF,QAEnDrJ,KAAKmE,OAAOF,aAAaqD,eACrBtH,KAAKiE,aACLjE,KAAKmD,GAAGI,aAEZvD,KAAKmE,OAAOR,OAAS3D,KAAK2D,OAC1B3D,KAAKmE,OAAOqB,QAAQxF,KAAK0D,Y,iCASzB,OAAO1D,KAAKqE,QAAUrE,KAAKyD,OAAOxB,K,oCASlC,OAAIjC,KAAKsE,iBACEtE,KAAKsE,iBAEXtE,KAAK2D,OAGH3D,KAAK2D,OAAOf,SAFR,I,6BAaR2F,EAAOC,GACV,GAAKxI,KAAK2D,OAuBV,OAnBA3D,KAAKwD,eAAiB,KAET,MAAT+E,IACAA,EAAQvI,KAAK8C,mBACA9C,KAAK6C,gBACd0F,EAAQ,GAGL,MAAPC,IACAA,EAAMxI,KAAK6C,eAGf7C,KAAK+C,cAAgBwF,EACrBvI,KAAKsD,SAAWtD,KAAKmD,GAAGI,YAEpBvD,KAAKqE,QAAUrE,KAAKyD,OAAOtB,IAC3BnC,KAAKkF,SAAShD,GAGX,CACHqG,MAAOA,EACPC,IAAKA,K,sCAUT,OAAQxI,KAAKmD,GAAGI,YAAcvD,KAAKsD,UAAYtD,KAAKiE,e,2BAUnDsE,EAAOC,GACR,GAAKxI,KAAK2D,OAAV,CAKA3D,KAAKiJ,eAEL,IAAMK,EAAetJ,KAAKuJ,OAAOhB,EAAOC,GAExCD,EAAQe,EAAaf,MACrBC,EAAMc,EAAad,IAEnBxI,KAAKwD,eAAiBgF,EAEtBxI,KAAKmE,OAAOoE,MAAM,EAAGA,EAAOC,EAAMD,GAEb,aAAjBvI,KAAKmD,GAAGkB,OACRrE,KAAKmD,GAAGqG,QAAUxJ,KAAKmD,GAAGqG,SAG9BxJ,KAAKkF,SAASjD,GAEdjC,KAAKkD,UAAU,W,8BAOflD,KAAKwD,eAAiB,KAEtBxD,KAAK+C,eAAiB/C,KAAKgD,gBAC3BhD,KAAKmE,QAAUnE,KAAKmE,OAAOiF,KAAK,GAEhCpJ,KAAKkF,SAAShD,GAEdlC,KAAKkD,UAAU,W,uCAUf,OAAOlD,KAAKqE,MAAMvB,eAAe5E,KAAK8B,Q,wCAStC,OAAOA,KAAKiE,e,sCAQAjF,GACZA,EAAQA,GAAS,EACbgB,KAAK4I,WACL5I,KAAKiE,aAAejF,GAEpBgB,KAAKqG,QACLrG,KAAKiE,aAAejF,EACpBgB,KAAKyJ,Y,iBA9rBIrH,EAEV4D,iBAAmB,I,oHCd9B,M,uSAAA,OACA,WACA,UACA,WACA,W,w/BAmMqB0D,E,YAqGjB,WAAYrH,GAAQ,MAchB,GAdgB,WAChB,2BApGJsH,cAAgB,CACZrH,aAAc,KACdwD,qBAAsB,KACtBV,UAAW,EACXwE,YAAY,EACZC,QAAS,WACTC,gBAAiB,KACjBC,UAAW,EACXC,OAAQ,KACRC,UAAW,KACXC,YAAa,OACbC,YAAa,EACbC,eAAe,EACfxH,SAAU,KACVyH,YAAY,EACZC,aAAa,EACbC,OAAQ,IACRC,eAAe,EACfC,UAAU,EACVC,eAAe,EACfC,eAAgB,IAChBC,eAAgB,KAChBC,eAAe,EACfC,UAAW,QACXC,YAAa,GACbC,WAAW,EACXC,eAAe,EACfC,WACIvN,OAAOwN,kBAAoBC,OAAOC,WAAaD,OAAOE,YAC1DC,QAAS,GACTC,cAAe,OACfC,6BAA6B,EAC7BC,SAAUC,UACVC,YAAY,EACZC,KAAK,EACLC,cAAc,EACdC,WAAY,EACZ/D,eAAe,EACfgE,UAAW,OACXC,IAAK,IA4DW,EAxDpBC,SAAW,CACPC,uBACA/J,oBAsDgB,EApBpBmC,KAAOA,EA0BH,EAAKlC,OAASkC,EAAK6H,OAAO,GAAI,EAAKzC,cAAetH,GAGlD,EAAK4H,UACD,iBAAmB5H,EAAO4H,UACpBoC,SAASC,cAAc,EAAKjK,OAAO4H,WACnC,EAAK5H,OAAO4H,WAEjB,EAAKA,UACN,MAAM,IAAIlD,MAAM,+BAgBpB,GAbkC,MAA9B,EAAK1E,OAAOuI,eAEZ,EAAKA,eAAiB,EAAKX,UACiB,iBAA9B,EAAK5H,OAAOuI,eAE1B,EAAKA,eAAiByB,SAASC,cAC3B,EAAKjK,OAAOuI,gBAIhB,EAAKA,eAAiB,EAAKvI,OAAOuI,gBAGjC,EAAKA,eACN,MAAM,IAAI7D,MAAM,qCAGpB,GAAI,EAAK1E,OAAOsI,gBAAkB,EAC9B,MAAM,IAAI5D,MAAM,yCACb,GAAI,EAAK1E,OAAOsI,eAAiB,GAAK,EACzC,MAAM,IAAI5D,MAAM,yCA8CpB,IA3CwB,IAApB,EAAK1E,OAAOwJ,KACZtH,EAAK7C,MAAM,EAAKuI,UAAW,CAAEsC,UAAW,oBAGxC,EAAKlK,OAAOyH,iBACZ,EAAK0C,mBAAmB,EAAKnK,OAAOyH,iBAQxC,EAAK2C,YAAc,EAMnB,EAAKC,SAAU,EAOf,EAAKC,UAAY,GAMjB,EAAKC,eAAiB,KAEtB,EAAKrF,YAAc,KAEnB,EAAKsF,OAAS,KAEd,EAAKhD,QAAU,KAEf,EAAKiD,UAAY,KAGmB,mBAAzB,EAAKzK,OAAOqJ,SACnB,MAAM,IAAI3E,MAAM,iCAKpB,EAAKgG,OAAS,EAAK1K,OAAOqJ,SAI1B,EAAKsB,QAAU,EAAKd,SAAS,EAAK7J,OAAOwH,SAKzC,EAAKoD,sBAAwB,GAE7B,EAAKC,aAAc,EAQnB,EAAKC,SAAU,EAKf,IAAIC,EAAY,EAgBhB,OAfA,EAAKC,UAAY9I,EAAK+I,SAClB,WAEQF,GAAa,EAAKP,OAAOU,QAAQC,aAChC,EAAKnL,OAAOyJ,eAEbsB,EAAY,EAAKP,OAAOU,QAAQC,YAChC,EAAKX,OAAO3J,UAAU,YAGI,iBAA3B,EAAKb,OAAOuJ,WACb,EAAKvJ,OAAOuJ,WACZ,KAGV,U,4OAvOgCrH,EAAKxE,U,uCAyD3BsC,GAEV,OADmB,IAAIqH,EAAWrH,GAChBI,W,kCA4LlB,OAJAzC,KAAKyN,gBAAgBzN,KAAKqC,OAAOkJ,SACjCvL,KAAK0N,eACL1N,KAAK2N,gBACL3N,KAAK4N,kBACE5N,O,sCAWKuL,GAAS,WAarB,OAXAA,EAAQxK,QAAQ,SAAA8M,GAAM,OAAI,EAAKC,UAAUD,KAGzCtC,EAAQxK,QAAQ,SAAA8M,GAGPA,EAAOE,WACR,EAAKC,WAAWH,EAAOvP,QAG/B0B,KAAKkD,UAAU,qBAAsBqI,GAC9BvL,O,yCAUP,OAAOA,KAAKiN,wB,gCAWNY,GAAQ,WACd,IAAKA,EAAOvP,KACR,MAAM,IAAIyI,MAAM,gCAEpB,IAAK8G,EAAOI,SACR,MAAM,IAAIlH,MAAJ,iBACQ8G,EAAOvP,KADf,yCAMNuP,EAAOK,aACPzP,OAAO+C,KAAKqM,EAAOK,aAAanN,QAAQ,SAAAoN,GAKpC,EAAKA,GAAoBN,EAAOK,YAAYC,KAIpD,IAAMC,EAAWP,EAAOI,SAiBxB,OAd8BxP,OAAO4P,oBACjC9J,EAAKxE,SAASJ,WAEIoB,QAAQ,SAAAzB,GAC1B8O,EAASzO,UAAUL,GAAOiF,EAAKxE,SAASJ,UAAUL,KAQtDU,KAAK6N,EAAOvP,MAAQ,IAAI8P,EAASP,EAAOxL,QAAU,GAAIrC,MACtDA,KAAKkD,UAAU,eAAgB2K,EAAOvP,MAC/B0B,O,iCAWA1B,GACP,IAAK0B,KAAK1B,GACN,MAAM,IAAIyI,MAAJ,iBAAoBzI,EAApB,6BASV,OAPI0B,KAAKiN,sBAAsB3O,IAE3B0B,KAAKsO,cAAchQ,GAEvB0B,KAAK1B,GAAMmE,OACXzC,KAAKiN,sBAAsB3O,IAAQ,EACnC0B,KAAKkD,UAAU,qBAAsB5E,GAC9B0B,O,oCAWG1B,GACV,IAAK0B,KAAK1B,GACN,MAAM,IAAIyI,MAAJ,iBACQzI,EADR,qDAIV,IAAK0B,KAAKiN,sBAAsB3O,GAC5B,MAAM,IAAIyI,MAAJ,iBACQzI,EADR,4CAIV,GAAkC,mBAAvB0B,KAAK1B,GAAMiQ,QAClB,MAAM,IAAIxH,MAAJ,iBAAoBzI,EAApB,uCAMV,OAHA0B,KAAK1B,GAAMiQ,iBACJvO,KAAKiN,sBAAsB3O,GAClC0B,KAAKkD,UAAU,mBAAoB5E,GAC5B0B,O,0CASS,WAChBvB,OAAO+C,KAAKxB,KAAKiN,uBAAuBlM,QAAQ,SAAAzC,GAAI,OAChD,EAAKgQ,cAAchQ,O,qCAUZ,WACX0B,KAAK6M,OAAS,IAAI7M,KAAK+M,OAAO/M,KAAKiK,UAAWjK,KAAKqC,QACnDrC,KAAK6M,OAAOpK,OACZzC,KAAKkD,UAAU,iBAAkBlD,KAAK6M,SAEP,IAA3B7M,KAAKqC,OAAOuJ,aACZjO,OAAO6Q,iBAAiB,SAAUxO,KAAKqN,WAAW,GAClD1P,OAAO6Q,iBAAiB,oBAAqBxO,KAAKqN,WAAW,IAGjErN,KAAK6M,OAAOlM,GAAG,SAAU,WACrB,EAAK8N,aACL,EAAK5B,OAAO6B,SAAS,EAAK7E,QAAQlH,uBAItC3C,KAAK6M,OAAOlM,GAAG,QAAS,SAACJ,EAAGmO,GACxB5N,WAAW,kBAAM,EAAKyI,OAAOmF,IAAW,KAI5C1O,KAAK6M,OAAOlM,GAAG,SAAU,SAAAJ,GACjB,EAAK8B,OAAO4I,eACZ,EAAKwD,aAET,EAAKvL,UAAU,SAAU3C,O,sCAUjB,WACRP,KAAK6J,SACL7J,KAAK6J,QAAQ0E,UAIU,gBAAvBvO,KAAKqC,OAAOwH,UACZ7J,KAAKqC,OAAOwH,QAAU,gBAIC,YAAvB7J,KAAKqC,OAAOwH,SACX7J,KAAKgN,QAAQrN,UAAUyD,iBAAiBlF,KAAK,QAE9C8B,KAAKqC,OAAOwH,QAAU,gBAG1B7J,KAAK6J,QAAU,IAAI7J,KAAKgN,QAAQhN,KAAKqC,QACrCrC,KAAK6J,QAAQpH,OACbzC,KAAKkD,UAAU,kBAAmBlD,KAAK6J,SAEvC7J,KAAK6J,QAAQlJ,GAAG,SAAU,WACtB,EAAKkM,OAAO6B,SAAS,EAAK7E,QAAQlH,qBAClC,EAAKO,UAAU,YAEnBlD,KAAK6J,QAAQlJ,GAAG,OAAQ,kBAAM,EAAKuC,UAAU,UAC7ClD,KAAK6J,QAAQlJ,GAAG,QAAS,kBAAM,EAAKuC,UAAU,WAE9ClD,KAAK6J,QAAQlJ,GAAG,eAAgB,SAAAyF,GAC5B,EAAKyG,OAAO6B,SAAS,EAAK7E,QAAQlH,qBAClC,EAAKO,UAAU,eAAgBkD,KAIP,iBAAxBpG,KAAKqC,OAAOwH,UACZ7J,KAAK6J,QAAQlJ,GAAG,OAAQ,WACpB,EAAKkM,OAAO6B,SAAS,EAAK7E,QAAQlH,uBAGtC3C,KAAK6J,QAAQlJ,GAAG,SAAU,WACtB,IAAIgO,EAAY,EAAKC,YACrB,EAAK1L,UAAU,SAAUyL,GAErB,EAAK9E,QAAQ6C,UAAY,EAAKA,UAC9B,EAAKA,QAAU,EAAK7C,QAAQ6C,QAC5B,EAAKxJ,UAAU,OAAQ,EAAKwJ,e,wCAYpC1M,KAAKqC,OAAO4I,gBACZjL,KAAK8M,UAAY,IAAI+B,a,oCAWzB,OAAO7O,KAAK6J,QAAQhH,gB,uCAUpB,OAAO7C,KAAK6J,QAAQ/G,mB,qCASTgM,GACPA,GAAW9O,KAAK6C,cAChB7C,KAAKuJ,OAAO,GAEZvJ,KAAKuJ,OAAOuF,EAAU9O,KAAK6C,iB,2BAgB9B0F,EAAOC,GAAK,WAEb,OADAxI,KAAKkD,UAAU,cAAe,kBAAM,EAAKuG,KAAKlB,EAAOC,KAC9CxI,KAAK6J,QAAQJ,KAAKlB,EAAOC,K,8BAUhC,IAAKxI,KAAK6J,QAAQjB,WACd,OAAO5I,KAAK6J,QAAQxD,U,kCAWxB,OAAOrG,KAAK6J,QAAQjB,WAAa5I,KAAKyJ,OAASzJ,KAAKqG,U,kCAUpD,OAAQrG,KAAK6J,QAAQjB,a,mCAUZkG,GACT9O,KAAK+O,MAAMD,IAAY9O,KAAKqC,OAAO0J,c,kCAU3B+C,GACR9O,KAAK+O,KAAKD,GAAW9O,KAAKqC,OAAO0J,c,2BAYhCiD,GACD,IAAMpM,EAAW5C,KAAK6C,eAAiB,EACnCoM,EAAWjP,KAAK8C,kBAAoB,EACxCmM,EAAW/N,KAAKwH,IAAI,EAAGxH,KAAKuH,IAAI7F,EAAUqM,GAAYD,GAAU,KAChEhP,KAAKkP,cAAcD,EAAWrM,K,oCAWpB8L,GACV1O,KAAKuJ,OAAOmF,GACZ1O,KAAK6M,OAAOsC,SAAST,K,6BAalBA,GAAU,WAEb,GACwB,iBAAbA,IACNU,SAASV,IACVA,EAAW,GACXA,EAAW,EAEX,MAAM,IAAI3H,MACN,gFAGR/G,KAAKkD,UAAU,cAAe,kBAAM,EAAKqG,OAAOmF,KAEhD,IAAMW,EAASrP,KAAK6J,QAAQjB,WAEvByG,GACDrP,KAAK6J,QAAQxD,QAGjB,IAAMiJ,EAAkBtP,KAAKqC,OAAOyJ,aACpC9L,KAAKqC,OAAOyJ,cAAe,EAC3B9L,KAAK6J,QAAQN,OAAOmF,EAAW1O,KAAK6C,eACpC7C,KAAK6M,OAAO6B,SAASA,GAEhBW,GACDrP,KAAK6J,QAAQJ,OAEjBzJ,KAAKqC,OAAOyJ,aAAewD,EAC3BtP,KAAKkD,UAAU,OAAQwL,K,6BASvB1O,KAAKqG,QACLrG,KAAKuJ,OAAO,GACZvJ,KAAK6M,OAAO6B,SAAS,K,gCAWfjI,GACN,OAAOzG,KAAK6J,QAAQjD,UAAUH,K,gCAUxBkI,GACN3O,KAAK6J,QAAQ0F,UAAUZ,GACvB3O,KAAKkD,UAAU,SAAUyL,K,kCAUzB,OAAO3O,KAAK6J,QAAQ+E,c,sCAURY,GACZxP,KAAK6J,QAAQ1E,gBAAgBqK,K,wCAS7B,OAAOxP,KAAK6J,QAAQ4F,oB,mCAYpBzP,KAAK0P,SAAS1P,KAAK0M,W,8BAcfiD,GAEAA,IAAS3P,KAAK0M,SAKdiD,GAGA3P,KAAKyM,YAAczM,KAAK6J,QAAQ+E,YAChC5O,KAAK6J,QAAQ0F,UAAU,GACvBvP,KAAK0M,SAAU,EACf1M,KAAKkD,UAAU,SAAU,KAIzBlD,KAAK6J,QAAQ0F,UAAUvP,KAAKyM,aAC5BzM,KAAK0M,SAAU,EACf1M,KAAKkD,UAAU,SAAUlD,KAAKyM,cAElCzM,KAAKkD,UAAU,OAAQlD,KAAK0M,UAlBxB1M,KAAKkD,UAAU,OAAQlD,KAAK0M,W,gCA4BhC,OAAO1M,KAAK0M,U,mCAWZ,OAAO1M,KAAK6J,QAAQjG,SAAW,K,qCAS/B5D,KAAKqC,OAAOyJ,cAAgB9L,KAAKqC,OAAOyJ,aACxC9L,KAAKyO,e,0CASLzO,KAAKqC,OAAOoI,UAAYzK,KAAKqC,OAAOoI,W,qCASpC,OAAOzK,KAAKqC,OAAO2J,Y,mCASV4D,GACT5P,KAAKqC,OAAO2J,UAAY4D,EACxB5P,KAAKyO,e,yCASL,OAAOzO,KAAKqC,OAAOmJ,gB,uCASNoE,GACb5P,KAAKqC,OAAOmJ,cAAgBoE,EAC5B5P,KAAKyO,e,2CASL,OAAOzO,KAAKqC,OAAOyH,kB,yCASJ8F,GACf5P,KAAKqC,OAAOyH,gBAAkB8F,EAC9BrL,EAAK7C,MAAM1B,KAAKiK,UAAW,CAAE4F,WAAY7P,KAAKqC,OAAOyH,oB,uCAUrD,OAAO9J,KAAKqC,OAAO6H,c,qCAUR0F,GACX5P,KAAKqC,OAAO6H,YAAc0F,EAC1B5P,KAAK6M,OAAOiD,iB,kCASZ,OAAO9P,KAAKqC,OAAOkI,S,gCASbA,GACNvK,KAAKqC,OAAOkI,OAASA,EACrBvK,KAAK6M,OAAOkD,UAAUxF,EAASvK,KAAKqC,OAAO6I,YAC3ClL,KAAKyO,e,mCAUL,IAoBIzK,EApBEgM,EAAe9O,KAAK+O,MACtBjQ,KAAK6C,cACD7C,KAAKqC,OAAO0I,YACZ/K,KAAKqC,OAAO6I,YAEdgF,EAAclQ,KAAK6M,OAAOsD,WAC5BC,EAAQJ,EAERzH,EAAQ,EACRC,EAAMtH,KAAKwH,IAAIH,EAAQ2H,EAAaE,GAYxC,GATIpQ,KAAKqC,OAAOgI,cACVrK,KAAKqC,OAAOyJ,cAAgBkE,EAAeE,KAG7C3H,EAAQ,EACRC,EAFA4H,EAAQF,GAMRlQ,KAAKqC,OAAO4I,cAAe,CAC3B,IAKIlN,EALEsS,EAAYrQ,KAAK8M,UAAUwD,oBAC7BF,EACA7H,EACAC,GAGJ,IAAKzK,EAAI,EAAGA,EAAIsS,EAAU7P,OAAQzC,IAC9BiG,EAAQhE,KAAK6J,QAAQ0G,SACjBH,EACAC,EAAUtS,GAAG,GACbsS,EAAUtS,GAAG,IAEjBiC,KAAK6M,OAAO2D,UACRxM,EACAoM,EACAC,EAAUtS,GAAG,GACbsS,EAAUtS,GAAG,SAIrBiG,EAAQhE,KAAK6J,QAAQ0G,SAASH,EAAO7H,EAAOC,GAC5CxI,KAAK6M,OAAO2D,UAAUxM,EAAOoM,EAAO7H,EAAOC,GAE/CxI,KAAKkD,UAAU,SAAUc,EAAOoM,K,2BAa/BK,GACIA,GAIDzQ,KAAKqC,OAAO0I,YAAc0F,EAC1BzQ,KAAKqC,OAAOyJ,cAAe,IAJ3B9L,KAAKqC,OAAO0I,YAAc/K,KAAK2J,cAAcoB,YAC7C/K,KAAKqC,OAAOyJ,cAAe,GAM/B9L,KAAKyO,aACLzO,KAAK6M,OAAO6B,SAAS1O,KAAK6J,QAAQlH,qBAElC3C,KAAK6M,OAAOsC,SAASnP,KAAK8C,iBAAmB9C,KAAK6C,eAClD7C,KAAKkD,UAAU,OAAQuN,K,sCASXlJ,GAAa,WACzBvH,KAAK0Q,kBAAkBnJ,EAAa,SAAAI,GAC3B,EAAKuF,aACN,EAAKyD,kBAAkBhJ,O,wCAYjBhE,GACd3D,KAAK6J,QAAQ+G,KAAKjN,GAClB3D,KAAKyO,aACLzO,KAAKkD,UAAU,SACflD,KAAKmN,SAAU,I,+BASV0D,GAAM,WAELC,EAAS,IAAIC,WACnBD,EAAOtC,iBAAiB,WAAY,SAAAjO,GAAC,OAAI,EAAKyQ,WAAWzQ,KACzDuQ,EAAOtC,iBAAiB,OAAQ,SAAAjO,GAAC,OAC7B,EAAK0Q,gBAAgB1Q,EAAE2Q,OAAOC,UAElCL,EAAOtC,iBAAiB,QAAS,kBAC7B,EAAKtL,UAAU,QAAS,wBAE5B4N,EAAOM,kBAAkBP,GACzB7Q,KAAKqR,U,2BA6BJC,EAAKtN,EAAOuN,EAAS3O,GAGtB,GAFA5C,KAAKqR,QAEDE,EAAS,CAGT,IAAMC,EAAuB,CACzB,+CACuD,IAAnD,CAAC,OAAQ,WAAY,QAAQC,QAAQF,GACzC,0BAA2BvN,EAC3B,sCAC4B,iBAAxBhE,KAAKqC,OAAOwH,QAChB,4BAA4C,iBAARyH,GAElCI,EAAgBjT,OAAO+C,KAAKgQ,GAAsBlM,OACpD,SAAAqM,GAAM,OAAIH,EAAqBG,KAE/BD,EAAclR,SAEdoR,QAAQC,KACJ,sEACIH,EAAcI,KAAK,WAG3BP,EAAU,MAIlB,OAAQvR,KAAKqC,OAAOwH,SAChB,IAAK,WACD,OAAO7J,KAAK+R,WAAWT,EAAKtN,EAAOpB,GACvC,IAAK,eACD,OAAO5C,KAAKgS,iBAAiBV,EAAKtN,EAAOuN,EAAS3O,M,iCAanD0O,EAAKtN,EAAOpB,GAAU,WACvBgO,EAAO,SAAAqB,GAIT,OAHIA,GACA,EAAKtF,UAAUvM,KAAK,EAAK8R,KAAK,QAASD,IAEpC,EAAKE,eAAeb,EAAK,SAAA3J,GAAI,OAAI,EAAKsJ,gBAAgBtJ,MAGjE,IAAI3D,EAKA,OAAO4M,IAJP5Q,KAAK6J,QAAQuI,SAASpO,EAAOpB,GAC7B5C,KAAKyO,aACLzO,KAAK2M,UAAUvM,KAAKJ,KAAKkS,KAAK,cAAetB,M,uCAkBpCyB,EAAUrO,EAAOuN,EAAS3O,GAAU,WAC7C0O,EAAMe,EAEV,GAAwB,iBAAbA,EACPrS,KAAK6J,QAAQ+G,KAAKU,EAAKtR,KAAK4K,eAAgB5G,EAAOuN,OAChD,CACH,IAAMe,EAAMD,EACZrS,KAAK6J,QAAQ0I,QAAQD,EAAKtO,GAI1BsN,EAAMgB,EAAIE,IAGdxS,KAAK2M,UAAUvM,KACXJ,KAAK6J,QAAQqI,KAAK,UAAW,WACzB,EAAKzD,aACL,EAAKvL,UAAU,SACf,EAAKiK,SAAU,IAEnBnN,KAAK6J,QAAQqI,KAAK,QAAS,SAAAO,GAAG,OAAI,EAAKvP,UAAU,QAASuP,MAM1DzO,GACAhE,KAAK6J,QAAQuI,SAASpO,EAAOpB,GAI3BoB,IAAShE,KAAKqC,OAAOiI,cACvBtK,KAAK6J,QAAQzG,oBAEbpD,KAAKmS,eAAeb,EAAK,SAAA/J,GACrB,EAAKmJ,kBAAkBnJ,EAAa,SAAA5D,GAChC,EAAKkG,QAAQlG,OAASA,EACtB,EAAKkG,QAAQuI,SAAS,MACtB,EAAK3D,aACL,EAAKvL,UAAU,wB,wCAabqE,EAAalH,GAAU,WACrCL,KAAKuH,YAAcA,EACnBvH,KAAK6J,QAAQ6G,kBACTnJ,EACA,SAAAI,GAGS,EAAKuF,aAAe,EAAK3F,aAAeA,IACzClH,EAASsH,GACT,EAAKJ,YAAc,OAG3B,kBAAM,EAAKrE,UAAU,QAAS,kC,qCAYvBoO,EAAKjR,GAAU,WACtBqS,EAAUnO,EAAK6H,OACf,CACIkF,IAAKA,EACLqB,aAAc,eAElB3S,KAAKqC,OAAO4J,KAEV2G,EAAUrO,EAAKsO,UAAUH,GAkB/B,OAhBA1S,KAAK4M,eAAiBgG,EAEtB5S,KAAK2M,UAAUvM,KACXwS,EAAQjS,GAAG,WAAY,SAAAJ,GACnB,EAAKyQ,WAAWzQ,KAEpBqS,EAAQjS,GAAG,UAAW,SAAAgH,GAClBtH,EAASsH,GACT,EAAKiF,eAAiB,OAE1BgG,EAAQjS,GAAG,QAAS,SAAAJ,GAChB,EAAK2C,UAAU,QAAS,gBAAkB3C,EAAEuS,SAC5C,EAAKlG,eAAiB,QAIvBgG,I,iCAUArS,GACP,IAAIwS,EAEAA,EADAxS,EAAEyS,iBACgBzS,EAAE0S,OAAS1S,EAAE2S,MAIb3S,EAAE0S,QAAU1S,EAAE0S,OAAS,KAE7CjT,KAAKkD,UAAU,UAAWhC,KAAK+O,MAAwB,IAAlB8C,GAAwBxS,EAAE2Q,U,gCAczD1Q,EAAQ2S,EAAUC,EAAU7K,GAClC/H,EAASA,GAAU,KACnB+H,EAAQA,GAAS,EACjB4K,EAAWA,GAAY,IACvBC,EAAWA,IAAY,EACvB,IAAMpP,EAAQhE,KAAK6J,QAAQ0G,SAAS/P,EAAQ+H,GACtC8K,EAAM,GAAGC,IAAIpV,KACf8F,EACA,SAAAuP,GAAG,OAAIrS,KAAK+O,MAAMsD,EAAMJ,GAAYA,IAElCK,EAAOC,KAAKC,UAAUL,GAO5B,OANKD,GACDzV,OAAOgW,KACH,uCACIC,mBAAmBJ,IAGxBA,I,kCAqBCK,EAAQC,EAASC,GAWzB,OAVKF,IACDA,EAAS,aAERC,IACDA,EAAU,GAETC,IACDA,EAAO,WAGJ/T,KAAK6M,OAAOmH,SAASH,EAAQC,EAASC,K,mCAOzC/T,KAAK4M,gBAAkB5M,KAAK4M,eAAeqH,aAC3CjU,KAAK4M,eAAeqH,WAAWC,QAC/BlU,KAAK4M,eAAiB,Q,uCAQ1B5M,KAAK2M,UAAU5L,QAAQ,SAAAR,GAAC,OAAIA,EAAED,S,8BAOzBN,KAAK6J,QAAQjB,aACd5I,KAAKoJ,OACLpJ,KAAK6J,QAAQf,oBAEjB9I,KAAKmN,SAAU,EACfnN,KAAKmU,aACLnU,KAAKoU,iBACLpU,KAAK6M,OAAO6B,SAAS,GACrB1O,KAAK6M,OAAOwH,SAAS,GACrBrU,KAAK6M,OAAO2D,UAAU,CAAEhQ,OAAQR,KAAK6M,OAAOsD,YAAc,K,gCAS1DnQ,KAAKsU,oBACLtU,KAAKkD,UAAU,WACflD,KAAKmU,aACLnU,KAAKoU,iBACLpU,KAAK6I,SAC0B,IAA3B7I,KAAKqC,OAAOuJ,aACZjO,OAAO4W,oBAAoB,SAAUvU,KAAKqN,WAAW,GACrD1P,OAAO4W,oBACH,oBACAvU,KAAKqN,WACL,IAGRrN,KAAK6J,QAAQ0E,UACbvO,KAAK6M,OAAO0B,UACZvO,KAAKkN,aAAc,EACnBlN,KAAKmN,SAAU,EACfnN,KAAKuH,YAAc,S,iBA13CNmC,EAsEV8K,QAAUC,QAtEA/K,EA2FVnF,KAAOA,E,6GCvPH,SAAcmO,GACzB,IAAMzE,EAAW,IAAIlO,UACfkM,EAAM,IAAIyI,eACZC,GAAW,EACf1I,EAAI0H,KAAKjB,EAAQkC,QAAU,MAAOlC,EAAQpB,KAAK,GAC/CrF,EAAI0G,aAAeD,EAAQC,cAAgB,OAEvCD,EAAQzG,MACJyG,EAAQzG,IAAI4I,gBAEZnC,EAAQzG,IAAI4I,eAAe9T,QAAQ,SAAA+T,GAC/B7I,EAAI8I,iBAAiBD,EAAOxV,IAAKwV,EAAO9V,SAG5C0T,EAAQzG,IAAI+I,kBAEZ/I,EAAI+I,iBAAkB,IAwB9B,OApBA/I,EAAIuC,iBAAiB,WAAY,SAAAjO,GAC7B0N,EAAS/K,UAAU,WAAY3C,GAC3BA,EAAEyS,kBAAoBzS,EAAE0S,QAAU1S,EAAE2S,QACpCyB,GAAW,KAGnB1I,EAAIuC,iBAAiB,OAAQ,SAAAjO,GACpBoU,GACD1G,EAAS/K,UAAU,WAAY3C,GAEnC0N,EAAS/K,UAAU,OAAQ3C,GACvB,KAAO0L,EAAIgJ,QAAU,KAAOhJ,EAAIgJ,OAChChH,EAAS/K,UAAU,UAAW+I,EAAIiJ,SAAU3U,GAE5C0N,EAAS/K,UAAU,QAAS3C,KAGpC0L,EAAIuC,iBAAiB,QAAS,SAAAjO,GAAC,OAAI0N,EAAS/K,UAAU,QAAS3C,KAC/D0L,EAAIkJ,OACJlH,EAAShC,IAAMA,EACRgC,GAnFX,I,EAAA,G,EAAA,O,wICOe,SAAamH,GACxB,IAAIC,GAAWC,IAMf,OALA7W,OAAO+C,KAAK4T,GAAQrU,QAAQ,SAAAhD,GACpBqX,EAAOrX,GAAKsX,IACZA,EAAUD,EAAOrX,MAGlBsX,G,6GCPI,SAAaD,GACxB,IAAIG,EAAWC,OAAOF,KAMtB,OALA7W,OAAO+C,KAAK4T,GAAQrU,QAAQ,SAAAhD,GACpBqX,EAAOrX,GAAKwX,IACZA,EAAWH,EAAOrX,MAGnBwX,G,6GCNI,SAAgBtO,GAAkB,2BAATwO,EAAS,iCAATA,EAAS,kBAM7C,OALAA,EAAQ1U,QAAQ,SAAAoD,GACZ1F,OAAO+C,KAAK2C,GAAQpD,QAAQ,SAAAzB,GACxB2H,EAAK3H,GAAO6E,EAAO7E,OAGpB2H,G,6GCJI,SAAeyO,GAC1B,OAAO,sCAAI9U,EAAJ,yBAAIA,EAAJ,uBAAa,aAAkB,kBAAM8U,EAAI,WAAJ,EAAQ9U,OAXxD,I,EAAA,G,EAAA,O,8DCcA,SAAS0M,EAASoI,EAAMC,EAAMC,GAC5B,IAAIC,EAASjV,EAAMkV,EAASC,EAAW5E,EAGvC,SAAS6E,IACP,IAAIjO,EAAOkO,KAAKC,MAAQH,EAEpBhO,EAAO4N,GAAQ5N,GAAQ,EACzB8N,EAAU/U,WAAWkV,EAAOL,EAAO5N,IAEnC8N,EAAU,KACLD,IACHzE,EAASuE,EAAK7U,MAAMiV,EAASlV,GAC7BkV,EAAUlV,EAAO,OAXnB,MAAQ+U,IAAMA,EAAO,KAgBzB,IAAIQ,EAAY,WACdL,EAAU9V,KACVY,EAAOwV,UACPL,EAAYE,KAAKC,MACjB,IAAIG,EAAUT,IAAcC,EAO5B,OANKA,IAASA,EAAU/U,WAAWkV,EAAOL,IACtCU,IACFlF,EAASuE,EAAK7U,MAAMiV,EAASlV,GAC7BkV,EAAUlV,EAAO,MAGZuQ,GAoBT,OAjBAgF,EAAUG,MAAQ,WACZT,IACFU,aAAaV,GACbA,EAAU,OAIdM,EAAUK,MAAQ,WACZX,IACF1E,EAASuE,EAAK7U,MAAMiV,EAASlV,GAC7BkV,EAAUlV,EAAO,KAEjB2V,aAAaV,GACbA,EAAU,OAIPM,EAIT7I,EAASA,SAAWA,EAEpB9P,EAAOD,QAAU+P,G,6BC/DjB,SAASmJ,EAAoBvW,GACzBA,EAAMwW,kBACNrK,SAASsK,KAAKpC,oBAAoB,QAASkC,GAAqB,G,2DAQrD,SAAsBrB,GACjC/I,SAASsK,KAAKnI,iBAAiB,QAASiI,GAAqB,I,6GCgGlD,SAAmB/D,GAC9B,IAAKA,EACD,MAAM,IAAI3L,MAAM,yBACb,IAAK2L,EAAQpB,IAChB,MAAM,IAAIvK,MAAM,qBAEpB,IAAMkH,EAAW,IAAIlO,UACf6W,EAAe,IAAIC,QACnBC,EAAe,IAAIC,QAAQrE,EAAQpB,KAGzCrD,EAASgG,WAAa,IAAI+C,gBAGtBtE,GAAWA,EAAQmC,gBAEnBnC,EAAQmC,eAAe9T,QAAQ,SAAA+T,GAC3B8B,EAAaK,OAAOnC,EAAOxV,IAAKwV,EAAO9V,SAK/C,IAAM2T,EAAeD,EAAQC,cAAgB,OACvCuE,EAAe,CACjBtC,OAAQlC,EAAQkC,QAAU,MAC1BuC,QAASP,EACT1X,KAAMwT,EAAQxT,MAAQ,OACtBkY,YAAa1E,EAAQ0E,aAAe,cACpCC,MAAO3E,EAAQ2E,OAAS,UACxBC,SAAU5E,EAAQ4E,UAAY,SAC9BC,SAAU7E,EAAQ6E,UAAY,SAC9BC,OAAQvJ,EAASgG,WAAWuD,QA4EhC,OAzEAC,MAAMX,EAAcI,GACfQ,KAAK,SAAAxC,GAEFjH,EAASiH,SAAWA,EAEpB,IAAIyC,GAAoB,EACnBzC,EAASyB,OAGVgB,GAAoB,GAIxB,IAAMC,EAAgB1C,EAASiC,QAAQvY,IAAI,kBAQ3C,OAPsB,OAAlBgZ,IAIAD,GAAoB,GAGnBA,GAML1J,EAAS+C,WAAa,SAAAzQ,GAClB0N,EAAS/K,UAAU,WAAY3C,IAG5B,IAAIsX,SACP,IAAIC,eACA,IAAIC,EAAgB9J,EAAU2J,EAAe1C,IAEjDgC,IAZOhC,IAedwC,KAAK,SAAAxC,GACF,IAAI8C,EACJ,GAAI9C,EAAS+C,GACT,OAAQtF,GACJ,IAAK,cACD,OAAOuC,EAASgD,cAEpB,IAAK,OACD,OAAOhD,EAAS1B,OAEpB,IAAK,OACD,OAAO0B,EAASrE,OAEpB,IAAK,OACD,OAAOqE,EAASiD,OAEpB,QACIH,EAAS,yBAA2BrF,EAOhD,MAHKqF,IACDA,EAAS,sBAAwB9C,EAASD,QAExC,IAAIlO,MAAMiR,KAEnBN,KAAK,SAAAxC,GACFjH,EAAS/K,UAAU,UAAWgS,KAEjCkD,MAAM,SAAAC,GACHpK,EAAS/K,UAAU,QAASmV,KAIpCpK,EAAS6I,aAAeA,EACjB7I,GAxNX,I,EAAA,G,EAAA,O,qMAEM8J,E,WAQF,WAAY9J,EAAU2J,EAAe1C,I,4FAAU,SAC3ClV,KAAKiO,SAAWA,EAChBjO,KAAKiO,SAASqK,QAAUpD,EAASyB,KAAK4B,YAEtCvY,KAAKkT,MAAQsF,SAASZ,EAAe,IACrC5X,KAAKiT,OAAS,E,qDAUZgB,GAAY,YACD,SAAPwE,IAGF,EAAKxK,SAASqK,QACTG,OACAf,KAAK,YAAqB,IAAlBgB,EAAkB,EAAlBA,KAAM1Z,EAAY,EAAZA,MAIX,GAAI0Z,EAWA,OATmB,IAAf,EAAKxF,OACL,EAAKjF,SAAS+C,WAAW9S,KAAK,EAAK+P,SAAU,CACzCgF,OAAQ,EAAKA,OACbC,MAAO,EAAKA,MACZF,kBAAkB,SAI1BiB,EAAWjL,QAIf,EAAKiK,QAAUjU,EAAM2Z,WACrB,EAAK1K,SAAS+C,WAAW9S,KAAK,EAAK+P,SAAU,CACzCgF,OAAQ,EAAKA,OACbC,MAAO,EAAKA,MACZF,mBAAmC,IAAf,EAAKE,SAG7Be,EAAW2E,QAAQ5Z,GACnByZ,MAEHL,MAAM,SAAAC,GACHpE,EAAWoE,MAAMA,KAI7BI,Q,oJCpER,eACA,E,uSAAA,OACA,W,81BASqB9M,E,YAKjB,WAAY1B,EAAW5H,GAAQ,a,4FAAA,UAC3B,wBAAM4H,EAAW5H,KAMZsI,eAAiBtI,EAAOsI,eAM7B,EAAKkO,sBAAwB3X,KAAK+O,MAC9B5N,EAAOsI,eAAiBtI,EAAO6I,YASnC,EAAK4N,kBAAoBzW,EAAO2J,WAAa3J,EAAOmJ,cAMpD,EAAKuN,UAAY,GAAM1W,EAAO6I,WAQ9B,EAAK8N,SAAW,GAMhB,EAAKC,aAAe,KAQpB,EAAKC,WAAaC,UAQlB,EAAKC,QAAU,EAAIlY,KAAKmY,KAAKhX,EAAO6I,WAAa,GA3DtB,E,sPALM6B,W,qCAuEjC/M,KAAKsZ,gBACLtZ,KAAKuZ,mB,uCASLvZ,KAAKiZ,aAAejZ,KAAKuN,QAAQiM,YAC7BxZ,KAAK0B,MAAM2K,SAASoN,cAAc,QAAS,CACvCxK,SAAU,WACVyK,OAAQ,EACRC,KAAM,EACNC,IAAK,EACLC,OAAQ,EACRC,SAAU,SACV1J,MAAO,IACP2J,QAAS,OACTC,UAAW,aACXC,iBAAkB,QAClBC,cAAe,UAIvBla,KAAKma,YACLna,KAAK8P,iB,qCAOL9P,KAAK0B,MAAM1B,KAAKiZ,aAAc,CAC1BmB,iBAAkBpa,KAAKqC,OAAO8H,YAAc,KAC5CkQ,iBAAkBra,KAAKqC,OAAO6H,gB,mCAclC,IAPS,WACHoQ,EAAapZ,KAAK+O,MAAMjQ,KAAKoQ,MAAQpQ,KAAKqC,OAAO6I,YACjDqP,EAAmBrZ,KAAKmY,KAC1BiB,GAActa,KAAK6Y,sBAAwB7Y,KAAKoZ,UAI7CpZ,KAAKgZ,SAASxY,OAAS+Z,GAC1Bva,KAAKma,YAIT,KAAOna,KAAKgZ,SAASxY,OAAS+Z,GAC1Bva,KAAKwa,eAGT,IAAIC,EAAcza,KAAK2K,eAAiB3K,KAAKoZ,QACvCsB,EAAa1a,KAAKgZ,SAASxY,OAAS,EAC1CR,KAAKgZ,SAASjY,QAAQ,SAAC4Z,EAAO5c,GACtBA,GAAK2c,IACLD,EAAc,EAAKrK,MAAQ,EAAKzF,eAAiB+P,GAErD,EAAKE,iBAAiBD,EAAOF,EAAa,EAAKlQ,QAE/CoQ,EAAME,gB,kCAUV,IAAMF,EAAQ,IAAI3a,KAAKkZ,WACvByB,EAAM7B,kBAAoB9Y,KAAK8Y,kBAC/B6B,EAAM5B,UAAY/Y,KAAK+Y,UACvB,IAAM+B,EAAa9a,KAAK6Y,sBAAwB7Y,KAAKgZ,SAASxY,OAG9Dma,EAAMI,SACF/a,KAAKuN,QAAQiM,YACTxZ,KAAK0B,MAAM2K,SAASoN,cAAc,UAAW,CACzCxK,SAAU,WACVyK,OAAQ,EACRC,KAAMmB,EAAa,KACnBlB,IAAK,EACLC,OAAQ,EACRtP,OAAQ,OACR2P,cAAe,WAMvBla,KAAK8Y,mBACL6B,EAAMK,aACFhb,KAAKiZ,aAAaO,YACdxZ,KAAK0B,MAAM2K,SAASoN,cAAc,UAAW,CACzCxK,SAAU,WACV0K,KAAMmB,EAAa,KACnBlB,IAAK,EACLC,OAAQ,EACRtP,OAAQ,WAMxBvK,KAAKgZ,SAAS5Y,KAAKua,K,qCASnB,IAAIM,EAAYjb,KAAKgZ,SAAShZ,KAAKgZ,SAASxY,OAAS,GAGrDya,EAAUC,KAAKC,cAAcC,YAAYH,EAAUC,MAG/Clb,KAAK8Y,mBACLmC,EAAUvM,SAASyM,cAAcC,YAAYH,EAAUvM,UAIvDuM,IACAA,EAAU1M,UACV0M,EAAY,MAGhBjb,KAAKgZ,SAASqC,Q,uCAWDV,EAAOvK,EAAO7F,GAC3B,IAAM+Q,EAAepa,KAAK+O,MAAMG,EAAQpQ,KAAKqC,OAAO6I,YAC9CoP,EAAapZ,KAAK+O,MAAMjQ,KAAKoQ,MAAQpQ,KAAKqC,OAAO6I,YAGvDyP,EAAMC,iBAAiBU,EAAchB,EAAYlK,EAAO7F,GAGxDvK,KAAK0B,MAAM1B,KAAKiZ,aAAc,CAAEc,QAAS,Y,kCAOzC/Z,KAAKgZ,SAASjY,QAAQ,SAAA4Z,GAAK,OAAIA,EAAME,gB,+BAgBhC7W,EAAOuX,EAAchT,EAAOC,GAAK,WACtC,OAAOxI,KAAKwb,YACRxX,EACAuX,EACAhT,EACAC,EACA,YAA2D,IAAxDiT,EAAwD,EAAxDA,OAAQC,EAAgD,EAAhDA,WAAoBC,GAA4B,EAApCpR,OAAoC,EAA5BoR,SAASC,EAAmB,EAAnBA,MAAO5X,EAAY,EAAZA,MAG3C,QAAc/C,IAAVsH,EAqBJ,IAjBA,IAAMsT,EAAiBH,EAAa,EAAI,EAClClb,EAASwD,EAAMxD,OAASqb,EACxBC,EAAM,EAAKzZ,OAAO0Z,SAAW,EAAK1Z,OAAO6I,WAQzC8Q,EAAOF,GANc,OAAvB,EAAKzZ,OAAO2H,OACN9I,KAAKwH,IAAI,EAAKrG,OAAO6I,cAAe4Q,EAAM,IAC1C5a,KAAKwH,IACD,EAAKrG,OAAO6I,WACZ,EAAK7I,OAAO2H,OAAS,EAAK3H,OAAO6I,aAIzC+Q,EAAQzb,EAAS,EAAK4P,MAEtBrI,EAAOS,EACTzK,EAFUwK,EAINxK,EAAIgK,EAAMhK,GAAKie,EAAM,CACzB,IAAME,EACFlY,EAAM9C,KAAKib,MAAMpe,EAAIke,EAAQJ,KAAoB,EAC/CO,EAAIlb,KAAK+O,MAAOiM,EAAOT,EAAUG,GACvC,EAAKS,SACDte,EAAI,EAAKgb,UACT6C,EAAQQ,EAAIT,EACZG,EAAM,EAAK/C,UACP,EAAJqD,Q,+BAoBXpY,EAAOuX,EAAchT,EAAOC,GAAK,WACtC,OAAOxI,KAAKwb,YACRxX,EACAuX,EACAhT,EACAC,EACA,YAA2D,IAAxDiT,EAAwD,EAAxDA,OAAQC,EAAgD,EAAhDA,WAAoBC,GAA4B,EAApCpR,OAAoC,EAA5BoR,SAASC,EAAmB,EAAnBA,MAAO5X,EAAY,EAAZA,MAC3C,IAAK0X,EAAY,CAIb,IAHA,IAAMY,EAAiB,GACjBC,EAAMvY,EAAMxD,OACdzC,EAAI,EACAA,EAAIwe,EAAKxe,IACbue,EAAe,EAAIve,GAAKiG,EAAMjG,GAC9Bue,EAAe,EAAIve,EAAI,IAAMiG,EAAMjG,GAEvCiG,EAAQsY,OAKErb,IAAVsH,GACA,EAAKiU,SAASxY,EAAOyX,EAAQG,EAAOD,EAASpT,EAAOC,GAIxD,EAAK6T,SACD,EACAT,EAAQD,EAAU,EAAK5C,UACvB,EAAK3I,MACL,EAAK2I,e,+BAmBZ/U,EAAOyX,EAAQG,EAAOD,EAASpT,EAAOC,GAAK,WAChDxI,KAAKgZ,SAASjY,QAAQ,SAAA4Z,GAClB,EAAK8B,cAAc9B,GACnBA,EAAM+B,UAAU1Y,EAAOyX,EAAQG,EAAOD,EAASpT,EAAOC,O,+BAYrDmU,EAAGC,EAAGxM,EAAO7F,GAOlB,IANA,IAAMsS,EAAc3b,KAAKib,MAAMQ,EAAI3c,KAAK2K,gBAClCmS,EAAY5b,KAAKuH,IACnBvH,KAAKmY,MAAMsD,EAAIvM,GAASpQ,KAAK2K,gBAAkB,EAC/C3K,KAAKgZ,SAASxY,QAEdzC,EAAI8e,EACA9e,EAAI+e,EAAW/e,IAAK,CACxB,IAAM4c,EAAQ3a,KAAKgZ,SAASjb,GACtB+c,EAAa/c,EAAIiC,KAAK2K,eAEtBoS,EAAe,CACjBC,GAAI9b,KAAKwH,IAAIiU,EAAG5e,EAAIiC,KAAK2K,gBACzBsS,GAAIL,EACJM,GAAIhc,KAAKuH,IACLkU,EAAIvM,EACJrS,EAAIiC,KAAK2K,eAAiBgQ,EAAMO,KAAK9K,OAEzC+M,GAAIP,EAAIrS,GAGRwS,EAAaC,GAAKD,EAAaG,KAC/Bld,KAAKyc,cAAc9B,GAEnBA,EAAMyC,UACFL,EAAaC,GAAKlC,EAClBiC,EAAaE,GACbF,EAAaG,GAAKH,EAAaC,GAC/BD,EAAaI,GAAKJ,EAAaE,Q,kCAsBnCjZ,EAAOuX,EAAchT,EAAOC,EAAKrI,GAAI,WAC7C,OAAOoE,EAAK8Y,MAAM,WAEd,GAAIrZ,EAAM,aAAcsZ,MAAO,CAC3B,IAAM1V,EAAW5D,EACjB,GAAI,EAAK3B,OAAO2F,cAMZ,OALA,EAAK+H,UACDnI,EAASpH,OACL,EAAK6B,OAAOkI,OACZ,EAAKlI,OAAO6I,YAEbtD,EAAS7G,QAAQ,SAACwc,EAAcxf,GAAf,OACpB,EAAKyd,YAAY+B,EAAcxf,EAAGwK,EAAOC,EAAKrI,KAGtD6D,EAAQ4D,EAAS,GAKrB,IAAI6T,EAAS,EAAI,EAAKpZ,OAAO0H,UAC7B,GAAI,EAAK1H,OAAO2I,UAAW,CACvB,IAAMtC,EAAMnE,EAAKmE,IAAI1E,GACfyE,EAAMlE,EAAKkE,IAAIzE,GACrByX,GAAUhT,EAAMC,GAAOD,EAAMC,EAKjC,IAAMgT,EAAa,GAAG8B,KAAKtf,KAAK8F,EAAO,SAAAuP,GAAG,OAAIA,EAAM,IAC9ChJ,EAAS,EAAKlI,OAAOkI,OAAS,EAAKlI,OAAO6I,WAIhD,OAAO/K,EAAG,CACNsb,OAAQA,EACRC,WAAYA,EACZnR,OAAQA,EACRoR,QAPYpR,EAASgR,GAAgB,EAQrCK,MAPUrR,EAAS,EAQnBvG,MAAOA,KAvCRO,K,oCAkDGoW,GACVA,EAAM8B,cAAczc,KAAKqC,OAAO2J,UAAWhM,KAAKqC,OAAOmJ,iB,+BAiBlDqI,EAAQC,EAASC,GACtB,GAAa,SAATA,EACA,OAAOlN,QAAQ4W,IACXzd,KAAKgZ,SAAS1F,IAAI,SAAAqH,GACd,OAAOA,EAAM3G,SAASH,EAAQC,EAASC,MAG5C,GAAa,YAATA,EAAoB,CAC3B,IAAI2J,EAAS1d,KAAKgZ,SAAS1F,IAAI,SAAAqH,GAAK,OAChCA,EAAM3G,SAASH,EAAQC,EAASC,KAEpC,OAAO2J,EAAOld,OAAS,EAAIkd,EAASA,EAAO,M,qCASpCzO,GACXjP,KAAK0B,MAAM1B,KAAKiZ,aAAc,CAAE7I,MAAOnB,EAAW,Y,gKC1gB1D,M,uSAAA,O,2yBAOqBlC,E,YAKjB,WAAY9C,EAAW5H,GAAQ,a,4FAAA,UAC3B,2BAEK4H,UAAYA,EAKjB,EAAK5H,OAASA,EAKd,EAAK+N,MAAQ,EAKb,EAAK7F,OAASlI,EAAOkI,OAAS,EAAKlI,OAAO6I,WAE1C,EAAKyS,QAAU,EAKf,EAAKpQ,QAAU,KAzBY,E,sPALChJ,EAAKxE,U,oCAwC/BuB,EAAIC,GACN,OAAOgD,EAAK7C,MAAMJ,EAAIC,K,sCAQtBvB,KAAKuN,QAAUvN,KAAKiK,UAAUuP,YAC1BnN,SAASoN,cAAc,SAG3BzZ,KAAK0B,MAAM1B,KAAKuN,QAAS,CACrBwM,QAAS,QACT9K,SAAU,WACV2O,WAAY,OACZC,iBAAkB,OAClBtT,OAAQvK,KAAKqC,OAAOkI,OAAS,QAG7BvK,KAAKqC,OAAOgI,YAAcrK,KAAKqC,OAAOyJ,eACtC9L,KAAK0B,MAAM1B,KAAKuN,QAAS,CACrB6C,MAAO,OACP0N,UAAW9d,KAAKqC,OAAOmI,cAAgB,SAAW,OAClDuT,UAAW,WAInB/d,KAAKge,uB,kCAUGzd,EAAG0d,IACVA,GAAa1d,EAAE2d,iBAEhB,IAQIxP,EAREyP,EAAU5d,EAAE6d,cACZ7d,EAAE6d,cAAc,GAAGD,QACnB5d,EAAE4d,QACFE,EAAOre,KAAKuN,QAAQ+Q,wBAEpBtO,EAAehQ,KAAKoQ,MACpBF,EAAclQ,KAAKmQ,WAoBzB,OAjBKnQ,KAAKqC,OAAOgI,YAAc2F,EAAeE,GAC1CxB,GACK1O,KAAKqC,OAAOwJ,IAAMwS,EAAKE,MAAQJ,EAAUA,EAAUE,EAAK1E,OACpD3Z,KAAKqC,OAAO6I,WAAa8E,IAAiB,GAEpC,IACXtB,EAAW,GAGfA,IACM1O,KAAKqC,OAAOwJ,IACRwS,EAAKE,MAAQJ,EACbA,EAAUE,EAAK1E,MACjB3Z,KAAKuN,QAAQiR,YACbxe,KAAKuN,QAAQkR,aAAe,EAGjC/P,I,2CAMU,WACjB1O,KAAKuN,QAAQiB,iBAAiB,QAAS,SAAAjO,GACnC,IAAMme,EACF,EAAKnR,QAAQoR,aAAe,EAAKpR,QAAQqR,aAC7C,GAAuB,GAAnBF,EAAsB,CAEtB,IAAML,EAAO,EAAK9Q,QAAQ+Q,wBAC1B,GAAI/d,EAAEse,SAAWR,EAAKxE,OAAS6E,EAE3B,OAIJ,EAAKrc,OAAOoI,UACZ,EAAKvH,UAAU,QAAS3C,EAAG,EAAKue,YAAYve,MAIpDP,KAAKuN,QAAQiB,iBAAiB,SAAU,SAAAjO,GAAC,OACrC,EAAK2C,UAAU,SAAU3C,O,gCAevByD,EAAOxD,EAAQ+H,EAAOC,GACvBxI,KAAKqU,SAAS7T,IACfR,KAAK6a,YAGT7a,KAAKqC,OAAO0Z,SACN/b,KAAK+e,SAAS/a,EAAO,EAAGuE,EAAOC,GAC/BxI,KAAKgf,SAAShb,EAAO,EAAGuE,EAAOC,K,oCAOhB,OAAjBxI,KAAKuN,UACLvN,KAAKuN,QAAQiR,WAAa,K,+BASzBS,GACL,IAAMhQ,EAAWjP,KAAKuN,QAAQkR,YAAcQ,EAC5Cjf,KAAKkf,mBAAmBjQ,GAAU,K,yCAUnBA,EAAU2G,GACzB,IAAM4I,EAAaxe,KAAKuN,QAAQiR,WAC1BW,KAAUnf,KAAKuN,QAAQC,YAAc,GACrC4R,EAAYpf,KAAKuN,QAAQkR,YAAcze,KAAKuN,QAAQC,YACtD0D,EAASjC,EAAWkQ,EACpBnQ,EAASkC,EAASsN,EAEL,GAAbY,KAMCxJ,IAAcuJ,GAAQnQ,GAAUA,EAASmQ,IAI1CjO,EAASsN,GADTxP,EAAS9N,KAAKwH,KADD,EACYxH,KAAKuH,IADjB,EAC2BuG,OAK5CkC,EAAShQ,KAAKwH,IAAI,EAAGxH,KAAKuH,IAAI2W,EAAWlO,MAE3BsN,IACVxe,KAAKuN,QAAQiR,WAAatN,M,mCAU9B,IAAIyL,EAAI,EACR,GAAI3c,KAAKuN,QAAS,CACd,IAAMrC,EAAalL,KAAKqC,OAAO6I,WAQ/B,GAPAyR,EAAIzb,KAAK+O,MAAMjQ,KAAKuN,QAAQiR,WAAatT,GAOrClL,KAAKqC,OAAOyJ,aAAc,CAC1B,IAAMsT,KACFpf,KAAKuN,QAAQkR,YAAcvT,EAC3BlL,KAAKmQ,YAETwM,EAAIzb,KAAKuH,IAAI2W,EAAWle,KAAKwH,IAAI,EAAGiU,KAG5C,OAAOA,I,iCASP,OAAOzb,KAAK+O,MAAMjQ,KAAKiK,UAAUuD,YAAcxN,KAAKqC,OAAO6I,c,+BAStDkF,GACL,OAAIpQ,KAAKoQ,OAASA,IAIlBpQ,KAAKoQ,MAAQA,EAETpQ,KAAKqC,OAAOgI,YAAcrK,KAAKqC,OAAOyJ,aACtC9L,KAAK0B,MAAM1B,KAAKuN,QAAS,CACrB6C,MAAO,KAGXpQ,KAAK0B,MAAM1B,KAAKuN,QAAS,CACrB6C,SAAUpQ,KAAKoQ,MAAQpQ,KAAKqC,OAAO6I,YAAc,OAIzDlL,KAAKqf,cACE,K,gCASD9U,GACN,OAAIA,GAAUvK,KAAKuK,SAGnBvK,KAAKuK,OAASA,EAEdvK,KAAK0B,MAAM1B,KAAKuN,QAAS,CACrBhD,UAAWvK,KAAKuK,OAASvK,KAAKqC,OAAO6I,YAAc,OAGvDlL,KAAKqf,cACE,K,+BAQF3Q,GACL,IAAM4Q,EAAa,EAAItf,KAAKqC,OAAO6I,WAC7BqU,EAAMre,KAAK+O,MAAMvB,EAAW1O,KAAKoQ,OAASkP,EAEhD,GAAIC,EAAMvf,KAAK2d,SAAW4B,EAAMvf,KAAK2d,SAAW2B,EAAY,CAGxD,GAFAtf,KAAK2d,QAAU4B,EAEXvf,KAAKqC,OAAOyJ,cAAgB9L,KAAKqC,OAAOuH,WAAY,CACpD,IAAM4V,KAAYxf,KAAKuN,QAAQkR,YAAc/P,GAC7C1O,KAAKkf,mBAAmBM,GAG5Bxf,KAAKyf,eAAeF,M,gCAQxBvf,KAAK6I,QACD7I,KAAKuN,UACDvN,KAAKuN,QAAQmS,YAAc1f,KAAKiK,WAChCjK,KAAKiK,UAAUmR,YAAYpb,KAAKuN,SAEpCvN,KAAKuN,QAAU,Q,6GAiCdvJ,EAAOuX,EAAchT,EAAOC,M,+BAe5BxE,EAAOuX,EAAchT,EAAOC,M,0EAetByG,S,gKCvYnB,cACA,U,6NASqBkK,E,WACjB,c,4FAAc,SAMVnZ,KAAKkb,KAAO,KAMZlb,KAAK2f,QAAU,KAMf3f,KAAK0O,SAAW,KAMhB1O,KAAK4f,YAAc,KAOnB5f,KAAKuI,MAAQ,EAObvI,KAAKwI,IAAM,EAMXxI,KAAK6f,IAAK,aAAM7f,KAAK8f,YAAYxhB,KAAKyhB,cAAgB,K,wDAQjD/d,GACLhC,KAAKkb,KAAOlZ,EACZhC,KAAK2f,QAAU3f,KAAKkb,KAAK8E,WAAW,Q,mCAS3Bhe,GACThC,KAAK0O,SAAW1M,EAChBhC,KAAK4f,YAAc5f,KAAK0O,SAASsR,WAAW,Q,uCAW/B1E,EAAchB,EAAYlK,EAAO7F,GAG9CvK,KAAKuI,MAAQvI,KAAKkb,KAAK+E,WAAa3F,GAAc,EAClDta,KAAKwI,IAAMxI,KAAKuI,MAAQ+S,EAAehB,EAGvCta,KAAKkb,KAAK9K,MAAQA,EAClBpQ,KAAKkb,KAAK3Q,OAASA,EACnB,IAAI2V,EAAc,CAAE9P,MAAOkL,EAAe,OAC1C,aAAMtb,KAAKkb,KAAMgF,GAEblgB,KAAK8Y,oBAEL9Y,KAAK0O,SAAS0B,MAAQA,EACtBpQ,KAAK0O,SAASnE,OAASA,GACvB,aAAMvK,KAAK0O,SAAUwR,M,kCASzBlgB,KAAK2f,QAAQQ,UACT,EACA,EACAngB,KAAK2f,QAAQS,OAAOhQ,MACpBpQ,KAAK2f,QAAQS,OAAO7V,QAIpBvK,KAAK8Y,mBACL9Y,KAAK4f,YAAYO,UACb,EACA,EACAngB,KAAK4f,YAAYQ,OAAOhQ,MACxBpQ,KAAK4f,YAAYQ,OAAO7V,U,oCAWtByB,EAAWR,GACrBxL,KAAK2f,QAAQU,UAAYrU,EAErBhM,KAAK8Y,oBACL9Y,KAAK4f,YAAYS,UAAY7U,K,gCAY3BmR,EAAGC,EAAGxM,EAAO7F,GACnBvK,KAAKsgB,kBAAkBtgB,KAAK2f,QAAShD,EAAGC,EAAGxM,EAAO7F,GAE9CvK,KAAK8Y,mBACL9Y,KAAKsgB,kBAAkBtgB,KAAK4f,YAAajD,EAAGC,EAAGxM,EAAO7F,K,wCAc5CgW,EAAK5D,EAAGC,EAAGxM,EAAO7F,GAC3BgW,GAGLA,EAAIlE,SAASM,EAAGC,EAAGxM,EAAO7F,K,gCAepBvG,EAAOyX,EAAQG,EAAOD,EAASpT,EAAOC,GAC5CxI,KAAKwgB,kBACDxgB,KAAK2f,QACL3b,EACAyX,EACAG,EACAD,EACApT,EACAC,GAGAxI,KAAK8Y,mBACL9Y,KAAKwgB,kBACDxgB,KAAK4f,YACL5b,EACAyX,EACAG,EACAD,EACApT,EACAC,K,wCAmBM+X,EAAKvc,EAAOyX,EAAQG,EAAOD,EAASpT,EAAOC,GACzD,GAAK+X,EAAL,CAIA,IAuBIxiB,EAAGme,EAAME,EAvBP5b,EAASwD,EAAMxD,OAAS,EACxBsH,EAAQ5G,KAAK+O,MAAMzP,EAASR,KAAKuI,OAMjCkY,EAAc3Y,EACd4Y,EAHOxf,KAAK+O,MAAMzP,EAASR,KAAKwI,KAAO,EAIvCyT,EAAQjc,KAAKkb,KAAK9K,OAASsQ,EAAYD,EAAc,GAGrDE,EAAa/E,EAAQD,EACrBiF,EAAanF,EAASG,EAW5B,IATA2E,EAAIM,YACJN,EAAIO,QAAQL,EAAc3Y,GAASmU,EAAO0E,GAE1CJ,EAAIQ,QACCN,EAAc3Y,GAASmU,EACxB0E,EAAazf,KAAK+O,OAAOjM,EAAM,EAAIyc,IAAgB,GAAKG,IAIvD7iB,EAAI0iB,EAAa1iB,EAAI2iB,EAAW3iB,IACjCme,EAAOlY,EAAM,EAAIjG,IAAM,EACvBqe,EAAIlb,KAAK+O,MAAMiM,EAAO0E,GACtBL,EAAIQ,QAAQhjB,EAAI+J,GAASmU,EAAQjc,KAAK+Y,UAAW4H,EAAavE,GAMlE,IADA,IAAIzT,EAAI+X,EAAY,EACZ/X,GAAK8X,EAAa9X,IACtBuT,EAAOlY,EAAM,EAAI2E,EAAI,IAAM,EAC3ByT,EAAIlb,KAAK+O,MAAMiM,EAAO0E,GACtBL,EAAIQ,QAAQpY,EAAIb,GAASmU,EAAQjc,KAAK+Y,UAAW4H,EAAavE,GAGlEmE,EAAIQ,QACCN,EAAc3Y,GAASmU,EACxB0E,EACIzf,KAAK+O,OAAOjM,EAAM,EAAIyc,EAAc,IAAM,GAAKG,IAGvDL,EAAIS,YACJT,EAAIU,U,gCAOJjhB,KAAK2f,QAAU,KACf3f,KAAKkb,KAAO,KAEZlb,KAAK4f,YAAc,KACnB5f,KAAK0O,SAAW,O,+BAgBXmF,EAAQC,EAASC,GAAM,WAC5B,MAAa,SAATA,EACO,IAAIlN,QAAQ,SAAAqa,GACf,EAAKhG,KAAKiG,OAAOD,EAASrN,EAAQC,KAEtB,YAATC,EACA/T,KAAKkb,KAAKkG,UAAUvN,EAAQC,QADhC,O,gKC1Tf,I,EAAA,G,EAAA,O,2BACA,E,uSAAA,O,klCAKqB3H,E,YAMjB,WAAY9J,GAAQ,a,4FAAA,UAChB,wBAAMA,KAEDA,OAASA,EAId,EAAKgf,MAAQ,CACT9d,YAAa,EACbX,SAAU,EACVyM,QAAQ,EACRpL,aAAc,EACdwF,KALS,aAMTpD,MANS,aAOTib,OAAQ,GAIZ,EAAKxW,UAAYzI,EAAOyI,UAAUiV,cAElC,EAAKwB,gBAAkBlf,EAAOkf,gBAE9B,EAAKvd,MAAQ,KAEb,EAAKC,aAAe,EAEpB,EAAKqd,OAAS,EAEd,EAAK5U,SAAU,EAEf,EAAK/I,OAAS,KAEd,EAAK6d,UAAY,KAhCD,E,sPANkBpf,W,qCA6ClCpC,KAAKmF,gBAAgBnF,KAAKqC,OAAO+C,WACjCpF,KAAKyhB,gB,oCAQK,WAWVzhB,KAAKW,GAAG,OAVe,SAAjB+gB,IACE,EAAK9Y,aAGT,EAAK1F,UAAU,eAAgB,EAAKJ,kBAGpCyB,EAAK8Y,MAAMqE,EAAXnd,MAOJvE,KAAKW,GAAG,QAAS,WACb,EAAKuC,UAAU,eAAgB,EAAKJ,sB,2BAavCwO,EAAKrH,EAAWjG,EAAOuN,GACxB,IAAM8P,EAAQhV,SAASoN,cAAczZ,KAAK8K,WAC1CuW,EAAMM,SAAW3hB,KAAKqC,OAAOwI,cAC7BwW,EAAMra,SAAWhH,KAAKqC,OAAO2E,WAAY,EACzCqa,EAAM9P,QAAqB,MAAXA,EAAkB,OAASA,EAC3C8P,EAAM7O,IAAMlB,EACZ+P,EAAM3f,MAAM0O,MAAQ,OAEpB,IAAMwR,EAAY3X,EAAUqC,cAActM,KAAK8K,WAC3C8W,GACA3X,EAAUmR,YAAYwG,GAE1B3X,EAAUuP,YAAY6H,GAEtBrhB,KAAK6hB,MAAMR,EAAOrd,K,8BASdsO,EAAKtO,GACTsO,EAAIqP,SAAW3hB,KAAKqC,OAAOwI,cAC3ByH,EAAItL,SAAWhH,KAAKqC,OAAO2E,WAAY,EAEvChH,KAAK6hB,MAAMvP,EAAKtO,K,4BAWdqd,EAAOrd,GAAO,WAGS,mBAAdqd,EAAMzQ,MAIbyQ,EAAMzQ,OAGVyQ,EAAM7S,iBAAiB,QAAS,WAC5B,EAAKtL,UAAU,QAAS,iCAG5Bme,EAAM7S,iBAAiB,UAAW,WAC9B,EAAKtL,UAAU,aAGnBme,EAAM7S,iBAAiB,QAAS,WAC5B,EAAKtL,UAAU,YAKnBme,EAAM7S,iBAAiB,OAAQ,WAC3B,EAAKtL,UAAU,UAGnBme,EAAM7S,iBAAiB,QAAS,WAC5B,EAAKtL,UAAU,WAGnBme,EAAM7S,iBAAiB,SAAU,SAAAtO,GAC7B,EAAKgD,UAAU,UAGnBme,EAAM7S,iBAAiB,eAAgB,SAAAtO,GACnC,EAAKwM,QAAU2U,EAAMS,MACjB,EAAKpV,QACL,EAAK4U,OAAS,EAEd,EAAKA,OAASD,EAAMC,OAExB,EAAKpe,UAAU,YAGnBlD,KAAKqhB,MAAQA,EACbrhB,KAAKgE,MAAQA,EACbhE,KAAKwhB,UAAY,KACjBxhB,KAAK2D,OAAS,KACd3D,KAAK0M,QAAU2U,EAAMS,MACrB9hB,KAAKmF,gBAAgBnF,KAAKiE,cAC1BjE,KAAKuP,UAAUvP,KAAKshB,U,iCASpB,OAAQthB,KAAKqhB,OAASrhB,KAAKqhB,MAAMhS,S,oCASjC,GAAIrP,KAAKsE,iBACL,OAAOtE,KAAKsE,iBAEhB,IAAI1B,GAAY5C,KAAK2D,QAAU3D,KAAKqhB,OAAOze,SAK3C,OAJIA,GAAY0S,MAEZ1S,EAAW5C,KAAKqhB,MAAMU,SAASvZ,IAAI,IAEhC5F,I,uCAUP,OAAO5C,KAAKqhB,OAASrhB,KAAKqhB,MAAM9d,c,0CAShC,OAAOvD,KAAK8C,iBAAmB9C,KAAK6C,eAAiB,I,wCASrD,OAAO7C,KAAKiE,cAAgBjE,KAAKqhB,MAAMpd,e,sCAQ3BjF,GACZgB,KAAKiE,aAAejF,GAAS,EAC7BgB,KAAKqhB,MAAMpd,aAAejE,KAAKiE,e,6BAQ5BsE,GACU,MAATA,IACAvI,KAAKqhB,MAAM9d,YAAcgF,GAE7BvI,KAAKgiB,iB,2BAYJzZ,EAAOC,GACRxI,KAAKuJ,OAAOhB,GACZ,IAAM0Z,EAAUjiB,KAAKqhB,MAAM5X,OAG3B,OAFAjB,GAAOxI,KAAKkiB,WAAW1Z,GAEhByZ,I,8BAUP,IAAIA,EAOJ,OALIjiB,KAAKqhB,QACLY,EAAUjiB,KAAKqhB,MAAMhb,SAEzBrG,KAAKgiB,eAEEC,I,iCASAzZ,GAAK,WACZxI,KAAKmiB,WAAa,SAAA/b,GACVA,GAAQoC,IACR,EAAKnC,QACL,EAAKkD,OAAOf,KAGpBxI,KAAKW,GAAG,eAAgBX,KAAKmiB,c,qCAKzBniB,KAAKmiB,aACLniB,KAAKM,GAAG,eAAgBN,KAAKmiB,YAC7BniB,KAAKmiB,WAAa,Q,+BAcjB3hB,EAAQsH,EAAOC,GACpB,OAAI/H,KAAK2D,OACL,4CAAsBnD,EAAQsH,EAAOC,GAElC/H,KAAKgE,OAAS,K,gCAUfyC,GACN,OAAIA,EACKzG,KAAKqhB,MAAMza,UAKT5G,KAAKqhB,MAAMza,UAAUH,GAJjBI,QAAQC,OACX,IAAIC,MAAM,+CAMfF,QAAQC,OAAO,IAAIC,MAAM,qBAAuBN,M,kCASvD,OAAOzG,KAAKshB,S,gCAQNtiB,GACNgB,KAAKshB,OAAStiB,EAEVgB,KAAKqhB,MAAMC,SAAWthB,KAAKshB,SAC3BthB,KAAKqhB,MAAMC,OAASthB,KAAKshB,U,gCAS7BthB,KAAKqG,QACLrG,KAAK6I,QAGD7I,KAAKqC,OAAOoJ,6BACZzL,KAAKqhB,OACLrhB,KAAKqhB,MAAM3B,YAEX1f,KAAKqhB,MAAM3B,WAAWtE,YAAYpb,KAAKqhB,OAG3CrhB,KAAKqhB,MAAQ,U,0UClYAxS,E,WAIjB,c,4FAAc,SACV7O,KAAKoiB,iB,gEAaLpiB,KAAKqiB,gBAAkB,GAMvBriB,KAAKsiB,iBAAmB,I,0CAWR9hB,EAAQ+H,EAAOC,GAC3BhI,GAAUR,KAAKsiB,kBACftiB,KAAKoiB,iBACLpiB,KAAKsiB,gBAAkB9hB,GAO3B,IAHA,IAAI+hB,EAAiB,GACjBxkB,EAAI,EAGJA,EAAIiC,KAAKqiB,gBAAgB7hB,QACzBR,KAAKqiB,gBAAgBtkB,GAAKwK,GAE1BxK,IASJ,IAHIA,EAAI,GAAK,GACTwkB,EAAeniB,KAAKmI,GAGpBxK,EAAIiC,KAAKqiB,gBAAgB7hB,QACzBR,KAAKqiB,gBAAgBtkB,IAAMyK,GAE3B+Z,EAAeniB,KAAKJ,KAAKqiB,gBAAgBtkB,IACzCA,IAGAA,EAAI,GAAK,GACTwkB,EAAeniB,KAAKoI,GAIxB+Z,EAAiBA,EAAejd,OAAO,SAACkd,EAAMjD,EAAKlM,GAC/C,OAAW,GAAPkM,EACOiD,GAAQnP,EAAIkM,EAAM,GAClBA,GAAOlM,EAAI7S,OAAS,EACpBgiB,GAAQnP,EAAIkM,EAAM,GAEtBiD,GAAQnP,EAAIkM,EAAM,IAAMiD,GAAQnP,EAAIkM,EAAM,KAMrDvf,KAAKqiB,gBAAkBriB,KAAKqiB,gBAAgBI,OAAOF,GACnDviB,KAAKqiB,gBAAkBriB,KAAKqiB,gBACvBK,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IACnBtd,OAAO,SAACkd,EAAMjD,EAAKlM,GAChB,OAAW,GAAPkM,EACOiD,GAAQnP,EAAIkM,EAAM,GAClBA,GAAOlM,EAAI7S,OAAS,EACpBgiB,GAAQnP,EAAIkM,EAAM,GAEtBiD,GAAQnP,EAAIkM,EAAM,IAAMiD,GAAQnP,EAAIkM,EAAM,KAKzD,IAAMsD,EAAqB,GAC3B,IAAK9kB,EAAI,EAAGA,EAAIwkB,EAAe/hB,OAAQzC,GAAK,EACxC8kB,EAAmBziB,KAAK,CAACmiB,EAAexkB,GAAIwkB,EAAexkB,EAAI,KAGnE,OAAO8kB,I,uCASP,IACI9kB,EADE+kB,EAAsB,GAE5B,IAAK/kB,EAAI,EAAGA,EAAIiC,KAAKqiB,gBAAgB7hB,OAAQzC,GAAK,EAC9C+kB,EAAoB1iB,KAAK,CACrBJ,KAAKqiB,gBAAgBtkB,GACrBiC,KAAKqiB,gBAAgBtkB,EAAI,KAGjC,OAAO+kB,O","file":"wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","export { default as ajax } from './ajax';\nexport { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as Observer } from './observer';\nexport { default as extend } from './extend';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\n","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers) {\n            return;\n        }\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n","/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n","/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n","/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n","import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** @private */\n    static scriptBufferSize = 256;\n    /** @private */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private  */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.analyser = null;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** @private */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.analyser = null;\n        /** @private */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n\n    /** @private */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {};\n    }\n\n    /** @private */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     * @private\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            let audio = new window.Audio();\n            if (!audio.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            audio.autoplay = true;\n            var dest = this.ac.createMediaStreamDestination();\n            this.gainNode.disconnect();\n            this.gainNode.connect(dest);\n            audio.srcObject = dest.stream;\n\n            return audio.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        this.offlineAc.decodeAudioData(\n            arraybuffer,\n            data => callback(data),\n            errback\n        );\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                let min = 0;\n                let max = 0;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start, end - start);\n\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        this.source && this.source.stop(0);\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        value = value || 1;\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            this.pause();\n            this.playbackRate = value;\n            this.play();\n        }\n    }\n}\n","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform around the progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for\n * unsupported browsers.\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement`)\n * `'audio'|'video'`\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     headers: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barGap: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = util.extend({}, this.defaultParams, params);\n\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            util.style(this.container, { transform: 'rotateY(180deg)' });\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    this.drawer.fireEvent('redraw');\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            this.params.backend == 'WebAudio' &&\n            !this.Backend.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement backend\n        if (this.params.backend === 'MediaElement') {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const paused = this.backend.isPaused();\n        // avoid draw wrong position while playing backward seeking\n        if (!paused) {\n            this.backend.pause();\n        }\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (!paused) {\n            this.backend.play();\n        }\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (mute) {\n            // If currently not muted then save current volume,\n            // turn off the volume and update the mute properties\n            this.savedVolume = this.backend.getVolume();\n            this.backend.setVolume(0);\n            this.isMuted = true;\n            this.fireEvent('volume', 0);\n        } else {\n            // If currently muted then restore to the saved volume\n            // and update the mute properties\n            this.backend.setVolume(this.savedVolume);\n            this.isMuted = false;\n            this.fireEvent('volume', this.savedVolume);\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getWaveColor() {\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color) {\n        this.params.waveColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getProgressColor() {\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color) {\n        this.params.progressColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.fireEvent('ready');\n        this.isReady = true;\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        this.empty();\n\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                'Backend is not of type MediaElement':\n                    this.params.backend !== 'MediaElement',\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                this.drawBuffer();\n                this.fireEvent('ready');\n                this.isReady = true;\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If no pre-decoded peaks provided or pre-decoded peaks are\n        // provided with forceDecode flag, attempt to download the\n        // audio file and decode it with Web Audio.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n        }\n\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        this.arraybuffer = arraybuffer;\n        this.backend.decodeArrayBuffer(\n            arraybuffer,\n            data => {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                    callback(data);\n                    this.arraybuffer = null;\n                }\n            },\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\n        );\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = util.extend(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', 'fetch error: ' + e.message);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and opens in a new window.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks. (Integer)\n     * @param {number} accuracy=10000 (Integer)\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @todo Update exportPCM to work with new getPeaks signature\n     * @return {string} JSON of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n        const json = JSON.stringify(arr);\n        if (!noWindow) {\n            window.open(\n                'data:application/json;charset=utf-8,' +\n                    encodeURIComponent(json)\n            );\n        }\n        return json;\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `'image/png'`. Other supported types are\n     * `'image/jpeg'` and `'image/webp'`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `'image/png'`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `'image/jpeg'`` and `'image/webp'`.\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\n     * or 'blob'.\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        this.backend.destroy();\n        this.drawer.destroy();\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n","import Observer from './observer';\n\n/**\n * Perform an ajax request using `XMLHttpRequest`.\n *\n * @deprecated Use `util.fetchFile` instead.\n *\n * @param {Object} options AJAX options to use. See example below for options.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     method: 'GET',\n *     url: undefined,\n *     responseType: 'json',\n *     xhr: {}\n * };\n *\n * // override default options\n * options.url = '../media/demo.wav';\n * options.responseType = 'arraybuffer';\n * options.xhr = {\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ],\n *     withCredentials: true\n * };\n *\n * // make ajax call\n * let ajaxCall = util.ajax(options);\n * ajaxCall.on('progress', e => {\n *     console.log('progress', e);\n * });\n * ajaxCall.on('success', (data, e) => {\n *     console.log('success!', data);\n * });\n * ajaxCall.on('error', e => {\n *     console.warn('ajax error: ' + e.target.statusText);\n * });\n */\nexport default function ajax(options) {\n    const instance = new Observer();\n    const xhr = new XMLHttpRequest();\n    let fired100 = false;\n    xhr.open(options.method || 'GET', options.url, true);\n    xhr.responseType = options.responseType || 'json';\n\n    if (options.xhr) {\n        if (options.xhr.requestHeaders) {\n            // add custom request headers\n            options.xhr.requestHeaders.forEach(header => {\n                xhr.setRequestHeader(header.key, header.value);\n            });\n        }\n        if (options.xhr.withCredentials) {\n            // use credentials\n            xhr.withCredentials = true;\n        }\n    }\n\n    xhr.addEventListener('progress', e => {\n        instance.fireEvent('progress', e);\n        if (e.lengthComputable && e.loaded == e.total) {\n            fired100 = true;\n        }\n    });\n    xhr.addEventListener('load', e => {\n        if (!fired100) {\n            instance.fireEvent('progress', e);\n        }\n        instance.fireEvent('load', e);\n        if (200 == xhr.status || 206 == xhr.status) {\n            instance.fireEvent('success', xhr.response, e);\n        } else {\n            instance.fireEvent('error', e);\n        }\n    });\n    xhr.addEventListener('error', e => instance.fireEvent('error', e));\n    xhr.send();\n    instance.xhr = xhr;\n    return instance;\n}\n","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n","/**\n * Extend an object shallowly with others\n *\n * @param {Object} dest The target object\n * @param {Object[]} sources The objects to use for extending\n *\n * @return {Object} Merged object\n */\nexport default function extend(dest, ...sources) {\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            dest[key] = source[key];\n        });\n    });\n    return dest;\n}\n","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n","/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n","import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         * @private\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @private\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @private\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     * @private\n     */\n    createElements() {\n        this.progressWave = this.wrapper.appendChild(\n            this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n            })\n        );\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     * @private\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        entry.initWave(\n            this.wrapper.appendChild(\n                this.style(document.createElement('canvas'), {\n                    position: 'absolute',\n                    zIndex: 2,\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0,\n                    height: '100%',\n                    pointerEvents: 'none'\n                })\n            )\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            entry.initProgress(\n                this.progressWave.appendChild(\n                    this.style(document.createElement('canvas'), {\n                        position: 'absolute',\n                        left: leftOffset + 'px',\n                        top: 0,\n                        bottom: 0,\n                        height: '100%'\n                    })\n                )\n            );\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     * @private\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @private\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        this.canvases.forEach(entry => entry.clearWave());\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                              this.params.pixelRatio,\n                              this.params.barGap * this.params.pixelRatio\n                          );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let i = first;\n\n                for (i; i < last; i += step) {\n                    const peak =\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                    const h = Math.round((peak / absmax) * halfH);\n                    this.fillRect(\n                        i + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @private\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end) {\n        this.canvases.forEach(entry => {\n            this.setFillStyles(entry);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     */\n    fillRect(x, y, width, height) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                this.setFillStyles(entry);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1\n                );\n            }\n        }\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @private\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n                if (this.params.splitChannels) {\n                    this.setHeight(\n                        channels.length *\n                            this.params.height *\n                            this.params.pixelRatio\n                    );\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn)\n                    );\n                }\n                peaks = channels[0];\n            }\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                const max = util.max(peaks);\n                const min = util.min(peaks);\n                absmax = -min > max ? -min : max;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const offsetY = height * channelIndex || 0;\n            const halfH = height / 2;\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @private\n     * @param {CanvasEntry} entry Target entry\n     */\n    setFillStyles(entry) {\n        entry.setFillStyles(this.params.waveColor, this.params.progressColor);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n","import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n        /** @private */\n        this.container = container;\n        /**\n         * @type {WavesurferParams}\n         * @private\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n        /** @private */\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = this.container.appendChild(\n            document.createElement('wave')\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = e.targetTouches\n            ? e.targetTouches[0].clientX\n            : e.clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress =\n                (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) *\n                    (this.params.pixelRatio / nominalWidth) || 0;\n\n            if (progress > 1) {\n                progress = 1;\n            }\n        } else {\n            progress =\n                ((this.params.rtl\n                    ? bbox.right - clientX\n                    : clientX - bbox.left) +\n                    this.wrapper.scrollLeft) /\n                    this.wrapper.scrollWidth || 0;\n        }\n\n        return progress;\n    }\n\n    /**\n     * @private\n     */\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const scrollbarHeight =\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\n            if (scrollbarHeight != 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // we'll limit the \"re-center\" rate.\n            const rate = 5;\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            this.style(this.wrapper, {\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(newPos);\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container) {\n                this.container.removeChild(this.wrapper);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n","/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         * @private\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         * @private\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(this.constructor.name.toLowerCase() + '_');\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d');\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext('2d');\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     *\n     * @param {string} waveColor Fill color for the wave canvas\n     * @param {?string} progressColor Fill color for the progress canvas\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = waveColor;\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = progressColor;\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     */\n    fillRects(x, y, width, height) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(this.progressCtx, x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height) {\n        if (!ctx) {\n            return;\n        }\n        ctx.fillRect(x, y, width, height);\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n                Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        // Dummy media to catch errors\n        /** @private */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     *\n     * @private\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks);\n    }\n\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @private\n     */\n    _load(media, peaks) {\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        if (typeof media.load == 'function') {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        media.addEventListener('error', () => {\n            this.fireEvent('error', 'Error loading media element');\n        });\n\n        media.addEventListener('canplay', () => {\n            this.fireEvent('canplay');\n        });\n\n        media.addEventListener('ended', () => {\n            this.fireEvent('finish');\n        });\n\n        // Listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        media.addEventListener('play', () => {\n            this.fireEvent('play');\n        });\n\n        media.addEventListener('pause', () => {\n            this.fireEvent('pause');\n        });\n\n        media.addEventListener('seeked', event => {\n            this.fireEvent('seek');\n        });\n\n        media.addEventListener('volumechange', event => {\n            this.isMuted = media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = media.volume;\n            }\n            this.fireEvent('volume');\n        });\n\n        this.media = media;\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @private\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n","/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n"],"sourceRoot":""}